/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type EarthfastOperatorStruct = {
  id: PromiseOrValue<BytesLike>;
  owner: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  email: PromiseOrValue<string>;
  stake: PromiseOrValue<BigNumberish>;
  balance: PromiseOrValue<BigNumberish>;
};

export type EarthfastOperatorStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  id: string;
  owner: string;
  name: string;
  email: string;
  stake: BigNumber;
  balance: BigNumber;
};

export interface EarthfastOperatorsInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "IMPORTER_ROLE()": FunctionFragment;
    "createOperator(address,string,string)": FunctionFragment;
    "deleteOperator(bytes32)": FunctionFragment;
    "depositOperatorBalance(bytes32,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "depositOperatorStake(bytes32,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "getOperator(bytes32)": FunctionFragment;
    "getOperatorCount()": FunctionFragment;
    "getOperators(uint256,uint256)": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStakePerNode()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address[],address,uint256,bool)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requireTopologyNode(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setOperatorBalanceImpl(bytes32,uint256,uint256)": FunctionFragment;
    "setOperatorOwner(bytes32,address)": FunctionFragment;
    "setOperatorProps(bytes32,string,string)": FunctionFragment;
    "setStakePerNode(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unsafeImportData((bytes32,address,string,string,uint256,uint256)[],bool)": FunctionFragment;
    "unsafeSetBalances(uint256,uint256,uint256,uint256)": FunctionFragment;
    "unsafeSetRegistry(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawOperatorBalance(bytes32,uint256,address)": FunctionFragment;
    "withdrawOperatorStake(bytes32,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "IMPORTER_ROLE"
      | "createOperator"
      | "deleteOperator"
      | "depositOperatorBalance"
      | "depositOperatorStake"
      | "getOperator"
      | "getOperatorCount"
      | "getOperators"
      | "getRegistry"
      | "getRoleAdmin"
      | "getStakePerNode"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "requireTopologyNode"
      | "revokeRole"
      | "setOperatorBalanceImpl"
      | "setOperatorOwner"
      | "setOperatorProps"
      | "setStakePerNode"
      | "supportsInterface"
      | "unpause"
      | "unsafeImportData"
      | "unsafeSetBalances"
      | "unsafeSetRegistry"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawOperatorBalance"
      | "withdrawOperatorStake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPORTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createOperator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteOperator",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOperatorBalance",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOperatorStake",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperator",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperators",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakePerNode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requireTopologyNode",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorBalanceImpl",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorOwner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorProps",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakePerNode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unsafeImportData",
    values: [EarthfastOperatorStruct[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeSetBalances",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeSetRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOperatorBalance",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOperatorStake",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPORTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOperatorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOperatorStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakePerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireTopologyNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorBalanceImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorProps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakePerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsafeImportData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeSetBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeSetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOperatorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOperatorStake",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OperatorBalanceChanged(bytes32,uint256,uint256)": EventFragment;
    "OperatorCreated(bytes32,address,string,string)": EventFragment;
    "OperatorDeleted(bytes32,address,string,string)": EventFragment;
    "OperatorOwnerChanged(bytes32,address,address)": EventFragment;
    "OperatorPropsChanged(bytes32,string,string,string,string)": EventFragment;
    "OperatorStakeChanged(bytes32,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorOwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorPropsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorStakeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OperatorBalanceChangedEventObject {
  operatorId: string;
  oldBalance: BigNumber;
  newBalance: BigNumber;
}
export type OperatorBalanceChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OperatorBalanceChangedEventObject
>;

export type OperatorBalanceChangedEventFilter =
  TypedEventFilter<OperatorBalanceChangedEvent>;

export interface OperatorCreatedEventObject {
  operatorId: string;
  owner: string;
  name: string;
  email: string;
}
export type OperatorCreatedEvent = TypedEvent<
  [string, string, string, string],
  OperatorCreatedEventObject
>;

export type OperatorCreatedEventFilter = TypedEventFilter<OperatorCreatedEvent>;

export interface OperatorDeletedEventObject {
  operatorId: string;
  owner: string;
  name: string;
  email: string;
}
export type OperatorDeletedEvent = TypedEvent<
  [string, string, string, string],
  OperatorDeletedEventObject
>;

export type OperatorDeletedEventFilter = TypedEventFilter<OperatorDeletedEvent>;

export interface OperatorOwnerChangedEventObject {
  operatorId: string;
  oldOwner: string;
  newOwner: string;
}
export type OperatorOwnerChangedEvent = TypedEvent<
  [string, string, string],
  OperatorOwnerChangedEventObject
>;

export type OperatorOwnerChangedEventFilter =
  TypedEventFilter<OperatorOwnerChangedEvent>;

export interface OperatorPropsChangedEventObject {
  operatorId: string;
  oldName: string;
  oldEmail: string;
  newName: string;
  newEmail: string;
}
export type OperatorPropsChangedEvent = TypedEvent<
  [string, string, string, string, string],
  OperatorPropsChangedEventObject
>;

export type OperatorPropsChangedEventFilter =
  TypedEventFilter<OperatorPropsChangedEvent>;

export interface OperatorStakeChangedEventObject {
  operatorId: string;
  oldStake: BigNumber;
  newStake: BigNumber;
}
export type OperatorStakeChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OperatorStakeChangedEventObject
>;

export type OperatorStakeChangedEventFilter =
  TypedEventFilter<OperatorStakeChangedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface EarthfastOperators extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EarthfastOperatorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    IMPORTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Does not check name or email for validity or uniqueness
     * Registers a new network operator. Only admin can do this.
     */
    createOperator(
      owner: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Unregisters a network operator. Reverts if operator has stake or nodes.
     */
    deleteOperator(
      operatorId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
     * Transfers USDC into the contract and applies them toward given operator balance.
     */
    depositOperatorBalance(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
     * Transfers tokens into the contract and applies them toward given operator stake.
     */
    depositOperatorStake(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if the id is unknown
     */
    getOperator(
      operatorId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[EarthfastOperatorStructOutput]>;

    getOperatorCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Truncates the results if skip or size are out of bounds
     */
    getOperators(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [EarthfastOperatorStructOutput[]] & {
        values: EarthfastOperatorStructOutput[];
      }
    >;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStakePerNode(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Called once to set up the contract. Not called during proxy upgrades.
     * @param grantImporterRole allows the contract deployer to import initial data into the contract using unsafeImport* functions, which is used for proxy-less upgrades. CAUTION: Once import is finished, the importer role should be explicitly revoked.
     */
    initialize(
      admins: PromiseOrValue<string>[],
      registry: PromiseOrValue<string>,
      stakePerNode: PromiseOrValue<BigNumberish>,
      grantImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requireTopologyNode(
      nodeId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperatorBalanceImpl(
      operatorId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperatorOwner(
      operatorId: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Does not check name or email for validity or uniqueness
     */
    setOperatorProps(
      operatorId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakePerNode(
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unsafeImportData(
      operators: EarthfastOperatorStruct[],
      revokeImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Adjusts multiple operators balances relative to their current values.CAUTION: This can break data consistency. Used for proxy-less upgrades.
     */
    unsafeSetBalances(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      mul: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * CAUTION: This can break data consistency. Used for proxy-less upgrades.
     */
    unsafeSetRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers earned USDC from contract to given recipient.
     */
    withdrawOperatorBalance(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers stake from contract to given recipient. Reverts if stake is locked.
     */
    withdrawOperatorStake(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  IMPORTER_ROLE(overrides?: CallOverrides): Promise<string>;

  /**
   * Does not check name or email for validity or uniqueness
   * Registers a new network operator. Only admin can do this.
   */
  createOperator(
    owner: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    email: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Unregisters a network operator. Reverts if operator has stake or nodes.
   */
  deleteOperator(
    operatorId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
   * Transfers USDC into the contract and applies them toward given operator balance.
   */
  depositOperatorBalance(
    operatorId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
   * Transfers tokens into the contract and applies them toward given operator stake.
   */
  depositOperatorStake(
    operatorId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if the id is unknown
   */
  getOperator(
    operatorId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<EarthfastOperatorStructOutput>;

  getOperatorCount(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Truncates the results if skip or size are out of bounds
   */
  getOperators(
    skip: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<EarthfastOperatorStructOutput[]>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakePerNode(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
   */
  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Called once to set up the contract. Not called during proxy upgrades.
   * @param grantImporterRole allows the contract deployer to import initial data into the contract using unsafeImport* functions, which is used for proxy-less upgrades. CAUTION: Once import is finished, the importer role should be explicitly revoked.
   */
  initialize(
    admins: PromiseOrValue<string>[],
    registry: PromiseOrValue<string>,
    stakePerNode: PromiseOrValue<BigNumberish>,
    grantImporterRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
   */
  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
   */
  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requireTopologyNode(
    nodeId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
   */
  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperatorBalanceImpl(
    operatorId: PromiseOrValue<BytesLike>,
    decrease: PromiseOrValue<BigNumberish>,
    increase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperatorOwner(
    operatorId: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Does not check name or email for validity or uniqueness
   */
  setOperatorProps(
    operatorId: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    email: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakePerNode(
    stake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unsafeImportData(
    operators: EarthfastOperatorStruct[],
    revokeImporterRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Adjusts multiple operators balances relative to their current values.CAUTION: This can break data consistency. Used for proxy-less upgrades.
   */
  unsafeSetBalances(
    skip: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    mul: PromiseOrValue<BigNumberish>,
    div: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * CAUTION: This can break data consistency. Used for proxy-less upgrades.
   */
  unsafeSetRegistry(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers earned USDC from contract to given recipient.
   */
  withdrawOperatorBalance(
    operatorId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers stake from contract to given recipient. Reverts if stake is locked.
   */
  withdrawOperatorStake(
    operatorId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    IMPORTER_ROLE(overrides?: CallOverrides): Promise<string>;

    /**
     * Does not check name or email for validity or uniqueness
     * Registers a new network operator. Only admin can do this.
     */
    createOperator(
      owner: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Unregisters a network operator. Reverts if operator has stake or nodes.
     */
    deleteOperator(
      operatorId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
     * Transfers USDC into the contract and applies them toward given operator balance.
     */
    depositOperatorBalance(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
     * Transfers tokens into the contract and applies them toward given operator stake.
     */
    depositOperatorStake(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if the id is unknown
     */
    getOperator(
      operatorId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<EarthfastOperatorStructOutput>;

    getOperatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Truncates the results if skip or size are out of bounds
     */
    getOperators(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<EarthfastOperatorStructOutput[]>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakePerNode(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Called once to set up the contract. Not called during proxy upgrades.
     * @param grantImporterRole allows the contract deployer to import initial data into the contract using unsafeImport* functions, which is used for proxy-less upgrades. CAUTION: Once import is finished, the importer role should be explicitly revoked.
     */
    initialize(
      admins: PromiseOrValue<string>[],
      registry: PromiseOrValue<string>,
      stakePerNode: PromiseOrValue<BigNumberish>,
      grantImporterRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requireTopologyNode(
      nodeId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorBalanceImpl(
      operatorId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperatorOwner(
      operatorId: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Does not check name or email for validity or uniqueness
     */
    setOperatorProps(
      operatorId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakePerNode(
      stake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unsafeImportData(
      operators: EarthfastOperatorStruct[],
      revokeImporterRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Adjusts multiple operators balances relative to their current values.CAUTION: This can break data consistency. Used for proxy-less upgrades.
     */
    unsafeSetBalances(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      mul: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * CAUTION: This can break data consistency. Used for proxy-less upgrades.
     */
    unsafeSetRegistry(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers earned USDC from contract to given recipient.
     */
    withdrawOperatorBalance(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers stake from contract to given recipient. Reverts if stake is locked.
     */
    withdrawOperatorStake(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OperatorBalanceChanged(bytes32,uint256,uint256)"(
      operatorId?: PromiseOrValue<BytesLike> | null,
      oldBalance?: null,
      newBalance?: null
    ): OperatorBalanceChangedEventFilter;
    OperatorBalanceChanged(
      operatorId?: PromiseOrValue<BytesLike> | null,
      oldBalance?: null,
      newBalance?: null
    ): OperatorBalanceChangedEventFilter;

    "OperatorCreated(bytes32,address,string,string)"(
      operatorId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      name?: null,
      email?: null
    ): OperatorCreatedEventFilter;
    OperatorCreated(
      operatorId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      name?: null,
      email?: null
    ): OperatorCreatedEventFilter;

    "OperatorDeleted(bytes32,address,string,string)"(
      operatorId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      name?: null,
      email?: null
    ): OperatorDeletedEventFilter;
    OperatorDeleted(
      operatorId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      name?: null,
      email?: null
    ): OperatorDeletedEventFilter;

    "OperatorOwnerChanged(bytes32,address,address)"(
      operatorId?: PromiseOrValue<BytesLike> | null,
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OperatorOwnerChangedEventFilter;
    OperatorOwnerChanged(
      operatorId?: PromiseOrValue<BytesLike> | null,
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OperatorOwnerChangedEventFilter;

    "OperatorPropsChanged(bytes32,string,string,string,string)"(
      operatorId?: PromiseOrValue<BytesLike> | null,
      oldName?: null,
      oldEmail?: null,
      newName?: null,
      newEmail?: null
    ): OperatorPropsChangedEventFilter;
    OperatorPropsChanged(
      operatorId?: PromiseOrValue<BytesLike> | null,
      oldName?: null,
      oldEmail?: null,
      newName?: null,
      newEmail?: null
    ): OperatorPropsChangedEventFilter;

    "OperatorStakeChanged(bytes32,uint256,uint256)"(
      operatorId?: PromiseOrValue<BytesLike> | null,
      oldStake?: null,
      newStake?: null
    ): OperatorStakeChangedEventFilter;
    OperatorStakeChanged(
      operatorId?: PromiseOrValue<BytesLike> | null,
      oldStake?: null,
      newStake?: null
    ): OperatorStakeChangedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    IMPORTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Does not check name or email for validity or uniqueness
     * Registers a new network operator. Only admin can do this.
     */
    createOperator(
      owner: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Unregisters a network operator. Reverts if operator has stake or nodes.
     */
    deleteOperator(
      operatorId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
     * Transfers USDC into the contract and applies them toward given operator balance.
     */
    depositOperatorBalance(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
     * Transfers tokens into the contract and applies them toward given operator stake.
     */
    depositOperatorStake(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if the id is unknown
     */
    getOperator(
      operatorId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Truncates the results if skip or size are out of bounds
     */
    getOperators(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakePerNode(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Called once to set up the contract. Not called during proxy upgrades.
     * @param grantImporterRole allows the contract deployer to import initial data into the contract using unsafeImport* functions, which is used for proxy-less upgrades. CAUTION: Once import is finished, the importer role should be explicitly revoked.
     */
    initialize(
      admins: PromiseOrValue<string>[],
      registry: PromiseOrValue<string>,
      stakePerNode: PromiseOrValue<BigNumberish>,
      grantImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requireTopologyNode(
      nodeId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperatorBalanceImpl(
      operatorId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperatorOwner(
      operatorId: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Does not check name or email for validity or uniqueness
     */
    setOperatorProps(
      operatorId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakePerNode(
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unsafeImportData(
      operators: EarthfastOperatorStruct[],
      revokeImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Adjusts multiple operators balances relative to their current values.CAUTION: This can break data consistency. Used for proxy-less upgrades.
     */
    unsafeSetBalances(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      mul: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * CAUTION: This can break data consistency. Used for proxy-less upgrades.
     */
    unsafeSetRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers earned USDC from contract to given recipient.
     */
    withdrawOperatorBalance(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers stake from contract to given recipient. Reverts if stake is locked.
     */
    withdrawOperatorStake(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IMPORTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Does not check name or email for validity or uniqueness
     * Registers a new network operator. Only admin can do this.
     */
    createOperator(
      owner: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Unregisters a network operator. Reverts if operator has stake or nodes.
     */
    deleteOperator(
      operatorId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
     * Transfers USDC into the contract and applies them toward given operator balance.
     */
    depositOperatorBalance(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().
     * Transfers tokens into the contract and applies them toward given operator stake.
     */
    depositOperatorStake(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the id is unknown
     */
    getOperator(
      operatorId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Truncates the results if skip or size are out of bounds
     */
    getOperators(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakePerNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Called once to set up the contract. Not called during proxy upgrades.
     * @param grantImporterRole allows the contract deployer to import initial data into the contract using unsafeImport* functions, which is used for proxy-less upgrades. CAUTION: Once import is finished, the importer role should be explicitly revoked.
     */
    initialize(
      admins: PromiseOrValue<string>[],
      registry: PromiseOrValue<string>,
      stakePerNode: PromiseOrValue<BigNumberish>,
      grantImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requireTopologyNode(
      nodeId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperatorBalanceImpl(
      operatorId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperatorOwner(
      operatorId: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Does not check name or email for validity or uniqueness
     */
    setOperatorProps(
      operatorId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakePerNode(
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unsafeImportData(
      operators: EarthfastOperatorStruct[],
      revokeImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Adjusts multiple operators balances relative to their current values.CAUTION: This can break data consistency. Used for proxy-less upgrades.
     */
    unsafeSetBalances(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      mul: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * CAUTION: This can break data consistency. Used for proxy-less upgrades.
     */
    unsafeSetRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers earned USDC from contract to given recipient.
     */
    withdrawOperatorBalance(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers stake from contract to given recipient. Reverts if stake is locked.
     */
    withdrawOperatorStake(
      operatorId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
