/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type EarthfastCreateProjectDataStruct = {
  owner: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  email: PromiseOrValue<string>;
  content: PromiseOrValue<string>;
  checksum: PromiseOrValue<BytesLike>;
  metadata: PromiseOrValue<string>;
};

export type EarthfastCreateProjectDataStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string
] & {
  owner: string;
  name: string;
  email: string;
  content: string;
  checksum: string;
  metadata: string;
};

export type EarthfastProjectStruct = {
  id: PromiseOrValue<BytesLike>;
  owner: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  email: PromiseOrValue<string>;
  escrow: PromiseOrValue<BigNumberish>;
  reserve: PromiseOrValue<BigNumberish>;
  content: PromiseOrValue<string>;
  checksum: PromiseOrValue<BytesLike>;
  metadata: PromiseOrValue<string>;
};

export type EarthfastProjectStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  id: string;
  owner: string;
  name: string;
  email: string;
  escrow: BigNumber;
  reserve: BigNumber;
  content: string;
  checksum: string;
  metadata: string;
};

export interface EarthfastProjectsInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "IMPORTER_ROLE()": FunctionFragment;
    "createProject((address,string,string,string,bytes32,string))": FunctionFragment;
    "deleteProject(bytes32)": FunctionFragment;
    "depositProjectEscrow(bytes32,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "getProject(bytes32)": FunctionFragment;
    "getProjectCount()": FunctionFragment;
    "getProjects(uint256,uint256)": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address[],address,bool)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setProjectContent(bytes32,string,bytes32)": FunctionFragment;
    "setProjectEscrowImpl(bytes32,uint256,uint256)": FunctionFragment;
    "setProjectMetadata(bytes32,string)": FunctionFragment;
    "setProjectOwner(bytes32,address)": FunctionFragment;
    "setProjectProps(bytes32,string,string)": FunctionFragment;
    "setProjectReserveImpl(bytes32,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unsafeImportData((bytes32,address,string,string,uint256,uint256,string,bytes32,string)[],bool)": FunctionFragment;
    "unsafeSetEscrows(uint256,uint256,uint256,uint256)": FunctionFragment;
    "unsafeSetRegistry(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawProjectEscrow(bytes32,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "IMPORTER_ROLE"
      | "createProject"
      | "deleteProject"
      | "depositProjectEscrow"
      | "getProject"
      | "getProjectCount"
      | "getProjects"
      | "getRegistry"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "setProjectContent"
      | "setProjectEscrowImpl"
      | "setProjectMetadata"
      | "setProjectOwner"
      | "setProjectProps"
      | "setProjectReserveImpl"
      | "supportsInterface"
      | "unpause"
      | "unsafeImportData"
      | "unsafeSetEscrows"
      | "unsafeSetRegistry"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawProjectEscrow"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPORTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [EarthfastCreateProjectDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProject",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositProjectEscrow",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProject",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjects",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectContent",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectEscrowImpl",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectMetadata",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectOwner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectProps",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectReserveImpl",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unsafeImportData",
    values: [EarthfastProjectStruct[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeSetEscrows",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeSetRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProjectEscrow",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPORTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositProjectEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProjectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProjectContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectEscrowImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectProps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectReserveImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsafeImportData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeSetEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeSetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProjectEscrow",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "ProjectContentChanged(bytes32,string,bytes32,string,bytes32)": EventFragment;
    "ProjectCreated(bytes32,address,string,string,string,bytes32,string)": EventFragment;
    "ProjectDeleted(bytes32,address,string,string,string,bytes32,string)": EventFragment;
    "ProjectEscrowChanged(bytes32,uint256,uint256)": EventFragment;
    "ProjectMetadataChanged(bytes32,string,string)": EventFragment;
    "ProjectOwnerChanged(bytes32,address,address)": EventFragment;
    "ProjectPropsChanged(bytes32,string,string,string,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectContentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectEscrowChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectMetadataChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectOwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectPropsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ProjectContentChangedEventObject {
  projectId: string;
  oldContent: string;
  oldChecksum: string;
  newContent: string;
  newChecksum: string;
}
export type ProjectContentChangedEvent = TypedEvent<
  [string, string, string, string, string],
  ProjectContentChangedEventObject
>;

export type ProjectContentChangedEventFilter =
  TypedEventFilter<ProjectContentChangedEvent>;

export interface ProjectCreatedEventObject {
  projectId: string;
  owner: string;
  name: string;
  email: string;
  content: string;
  checksum: string;
  metadata: string;
}
export type ProjectCreatedEvent = TypedEvent<
  [string, string, string, string, string, string, string],
  ProjectCreatedEventObject
>;

export type ProjectCreatedEventFilter = TypedEventFilter<ProjectCreatedEvent>;

export interface ProjectDeletedEventObject {
  projectId: string;
  owner: string;
  name: string;
  email: string;
  content: string;
  checksum: string;
  metadata: string;
}
export type ProjectDeletedEvent = TypedEvent<
  [string, string, string, string, string, string, string],
  ProjectDeletedEventObject
>;

export type ProjectDeletedEventFilter = TypedEventFilter<ProjectDeletedEvent>;

export interface ProjectEscrowChangedEventObject {
  projectId: string;
  oldEscrow: BigNumber;
  newEscrow: BigNumber;
}
export type ProjectEscrowChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ProjectEscrowChangedEventObject
>;

export type ProjectEscrowChangedEventFilter =
  TypedEventFilter<ProjectEscrowChangedEvent>;

export interface ProjectMetadataChangedEventObject {
  projectId: string;
  oldMetadata: string;
  newMetadata: string;
}
export type ProjectMetadataChangedEvent = TypedEvent<
  [string, string, string],
  ProjectMetadataChangedEventObject
>;

export type ProjectMetadataChangedEventFilter =
  TypedEventFilter<ProjectMetadataChangedEvent>;

export interface ProjectOwnerChangedEventObject {
  projectId: string;
  oldOwner: string;
  newOwner: string;
}
export type ProjectOwnerChangedEvent = TypedEvent<
  [string, string, string],
  ProjectOwnerChangedEventObject
>;

export type ProjectOwnerChangedEventFilter =
  TypedEventFilter<ProjectOwnerChangedEvent>;

export interface ProjectPropsChangedEventObject {
  projectId: string;
  oldName: string;
  oldEmail: string;
  newName: string;
  newEmail: string;
}
export type ProjectPropsChangedEvent = TypedEvent<
  [string, string, string, string, string],
  ProjectPropsChangedEventObject
>;

export type ProjectPropsChangedEventFilter =
  TypedEventFilter<ProjectPropsChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface EarthfastProjects extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EarthfastProjectsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    IMPORTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    createProject(
      project: EarthfastCreateProjectDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteProject(
      projectId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositProjectEscrow(
      projectId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProject(
      projectId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[EarthfastProjectStructOutput]>;

    getProjectCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProjects(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [EarthfastProjectStructOutput[]] & {
        values: EarthfastProjectStructOutput[];
      }
    >;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      admins: PromiseOrValue<string>[],
      registry: PromiseOrValue<string>,
      grantImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectContent(
      projectId: PromiseOrValue<BytesLike>,
      content: PromiseOrValue<string>,
      checksum: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectEscrowImpl(
      projectId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectMetadata(
      projectId: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectOwner(
      projectId: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectProps(
      projectId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProjectReserveImpl(
      projectId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unsafeImportData(
      projects: EarthfastProjectStruct[],
      revokeImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unsafeSetEscrows(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      mul: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unsafeSetRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProjectEscrow(
      projectId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  IMPORTER_ROLE(overrides?: CallOverrides): Promise<string>;

  createProject(
    project: EarthfastCreateProjectDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteProject(
    projectId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositProjectEscrow(
    projectId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProject(
    projectId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<EarthfastProjectStructOutput>;

  getProjectCount(overrides?: CallOverrides): Promise<BigNumber>;

  getProjects(
    skip: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<EarthfastProjectStructOutput[]>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    admins: PromiseOrValue<string>[],
    registry: PromiseOrValue<string>,
    grantImporterRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectContent(
    projectId: PromiseOrValue<BytesLike>,
    content: PromiseOrValue<string>,
    checksum: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectEscrowImpl(
    projectId: PromiseOrValue<BytesLike>,
    decrease: PromiseOrValue<BigNumberish>,
    increase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectMetadata(
    projectId: PromiseOrValue<BytesLike>,
    metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectOwner(
    projectId: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectProps(
    projectId: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    email: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProjectReserveImpl(
    projectId: PromiseOrValue<BytesLike>,
    decrease: PromiseOrValue<BigNumberish>,
    increase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unsafeImportData(
    projects: EarthfastProjectStruct[],
    revokeImporterRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unsafeSetEscrows(
    skip: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    mul: PromiseOrValue<BigNumberish>,
    div: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unsafeSetRegistry(
    registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProjectEscrow(
    projectId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    IMPORTER_ROLE(overrides?: CallOverrides): Promise<string>;

    createProject(
      project: EarthfastCreateProjectDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    deleteProject(
      projectId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositProjectEscrow(
      projectId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProject(
      projectId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<EarthfastProjectStructOutput>;

    getProjectCount(overrides?: CallOverrides): Promise<BigNumber>;

    getProjects(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<EarthfastProjectStructOutput[]>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      admins: PromiseOrValue<string>[],
      registry: PromiseOrValue<string>,
      grantImporterRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectContent(
      projectId: PromiseOrValue<BytesLike>,
      content: PromiseOrValue<string>,
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectEscrowImpl(
      projectId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectMetadata(
      projectId: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectOwner(
      projectId: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectProps(
      projectId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectReserveImpl(
      projectId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unsafeImportData(
      projects: EarthfastProjectStruct[],
      revokeImporterRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    unsafeSetEscrows(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      mul: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unsafeSetRegistry(
      registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProjectEscrow(
      projectId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ProjectContentChanged(bytes32,string,bytes32,string,bytes32)"(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldContent?: null,
      oldChecksum?: null,
      newContent?: null,
      newChecksum?: null
    ): ProjectContentChangedEventFilter;
    ProjectContentChanged(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldContent?: null,
      oldChecksum?: null,
      newContent?: null,
      newChecksum?: null
    ): ProjectContentChangedEventFilter;

    "ProjectCreated(bytes32,address,string,string,string,bytes32,string)"(
      projectId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      name?: null,
      email?: null,
      content?: null,
      checksum?: null,
      metadata?: null
    ): ProjectCreatedEventFilter;
    ProjectCreated(
      projectId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      name?: null,
      email?: null,
      content?: null,
      checksum?: null,
      metadata?: null
    ): ProjectCreatedEventFilter;

    "ProjectDeleted(bytes32,address,string,string,string,bytes32,string)"(
      projectId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      name?: null,
      email?: null,
      content?: null,
      checksum?: null,
      metadata?: null
    ): ProjectDeletedEventFilter;
    ProjectDeleted(
      projectId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      name?: null,
      email?: null,
      content?: null,
      checksum?: null,
      metadata?: null
    ): ProjectDeletedEventFilter;

    "ProjectEscrowChanged(bytes32,uint256,uint256)"(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldEscrow?: null,
      newEscrow?: null
    ): ProjectEscrowChangedEventFilter;
    ProjectEscrowChanged(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldEscrow?: null,
      newEscrow?: null
    ): ProjectEscrowChangedEventFilter;

    "ProjectMetadataChanged(bytes32,string,string)"(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldMetadata?: null,
      newMetadata?: null
    ): ProjectMetadataChangedEventFilter;
    ProjectMetadataChanged(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldMetadata?: null,
      newMetadata?: null
    ): ProjectMetadataChangedEventFilter;

    "ProjectOwnerChanged(bytes32,address,address)"(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): ProjectOwnerChangedEventFilter;
    ProjectOwnerChanged(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): ProjectOwnerChangedEventFilter;

    "ProjectPropsChanged(bytes32,string,string,string,string)"(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldName?: null,
      oldEmail?: null,
      newName?: null,
      newEmail?: null
    ): ProjectPropsChangedEventFilter;
    ProjectPropsChanged(
      projectId?: PromiseOrValue<BytesLike> | null,
      oldName?: null,
      oldEmail?: null,
      newName?: null,
      newEmail?: null
    ): ProjectPropsChangedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    IMPORTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    createProject(
      project: EarthfastCreateProjectDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteProject(
      projectId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositProjectEscrow(
      projectId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProject(
      projectId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjectCount(overrides?: CallOverrides): Promise<BigNumber>;

    getProjects(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admins: PromiseOrValue<string>[],
      registry: PromiseOrValue<string>,
      grantImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectContent(
      projectId: PromiseOrValue<BytesLike>,
      content: PromiseOrValue<string>,
      checksum: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectEscrowImpl(
      projectId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectMetadata(
      projectId: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectOwner(
      projectId: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectProps(
      projectId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProjectReserveImpl(
      projectId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unsafeImportData(
      projects: EarthfastProjectStruct[],
      revokeImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unsafeSetEscrows(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      mul: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unsafeSetRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProjectEscrow(
      projectId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IMPORTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createProject(
      project: EarthfastCreateProjectDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteProject(
      projectId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositProjectEscrow(
      projectId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProject(
      projectId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProjects(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admins: PromiseOrValue<string>[],
      registry: PromiseOrValue<string>,
      grantImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectContent(
      projectId: PromiseOrValue<BytesLike>,
      content: PromiseOrValue<string>,
      checksum: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectEscrowImpl(
      projectId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectMetadata(
      projectId: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectOwner(
      projectId: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectProps(
      projectId: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProjectReserveImpl(
      projectId: PromiseOrValue<BytesLike>,
      decrease: PromiseOrValue<BigNumberish>,
      increase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unsafeImportData(
      projects: EarthfastProjectStruct[],
      revokeImporterRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unsafeSetEscrows(
      skip: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      mul: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unsafeSetRegistry(
      registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProjectEscrow(
      projectId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
