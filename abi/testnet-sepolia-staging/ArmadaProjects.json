{
  "address": "0xEc72d099D0f791B4841A4EcBc99B98BCB7F08748",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldContent",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oldChecksum",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newContent",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newChecksum",
          "type": "bytes32"
        }
      ],
      "name": "ProjectContentChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "checksum",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "checksum",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "ProjectDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldEscrow",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEscrow",
          "type": "uint256"
        }
      ],
      "name": "ProjectEscrowChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldMetadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        }
      ],
      "name": "ProjectMetadataChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "ProjectOwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldEmail",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newEmail",
          "type": "string"
        }
      ],
      "name": "ProjectPropsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IMPORTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROJECT_CREATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "checksum",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct ArmadaCreateProjectData",
          "name": "project",
          "type": "tuple"
        }
      ],
      "name": "createProject",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "deleteProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositProjectEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "getProject",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "escrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "checksum",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct ArmadaProject",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProjectCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "skip",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getProjects",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "escrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "checksum",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct ArmadaProject[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistry",
      "outputs": [
        {
          "internalType": "contract ArmadaRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "admins",
          "type": "address[]"
        },
        {
          "internalType": "contract ArmadaRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "grantImporterRole",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "checksum",
          "type": "bytes32"
        }
      ],
      "name": "setProjectContent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "decrease",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "increase",
          "type": "uint256"
        }
      ],
      "name": "setProjectEscrowImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "setProjectMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setProjectOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        }
      ],
      "name": "setProjectProps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "decrease",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "increase",
          "type": "uint256"
        }
      ],
      "name": "setProjectReserveImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "escrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "checksum",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct ArmadaProject[]",
          "name": "projects",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "creators",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "revokeImporterRole",
          "type": "bool"
        }
      ],
      "name": "unsafeImportData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "skip",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mul",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "div",
          "type": "uint256"
        }
      ],
      "name": "unsafeSetEscrows",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ArmadaRegistry",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "unsafeSetRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawProjectEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf1a393320f21c2f5d10557ef308743d6bc12c9ced528af656be475cae97a3a5",
  "numDeployments": 1,
  "solcInputHash": "3d7781041167c62982425bd61ad25fd4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldContent\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldChecksum\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newContent\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newChecksum\",\"type\":\"bytes32\"}],\"name\":\"ProjectContentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ProjectDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEscrow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEscrow\",\"type\":\"uint256\"}],\"name\":\"ProjectEscrowChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldMetadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"ProjectMetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProjectOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldEmail\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newEmail\",\"type\":\"string\"}],\"name\":\"ProjectPropsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPORTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct ArmadaCreateProjectData\",\"name\":\"project\",\"type\":\"tuple\"}],\"name\":\"createProject\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"deleteProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositProjectEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"getProject\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"escrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct ArmadaProject\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"escrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct ArmadaProject[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"contract ArmadaRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"contract ArmadaRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"grantImporterRole\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"}],\"name\":\"setProjectContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"decrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increase\",\"type\":\"uint256\"}],\"name\":\"setProjectEscrowImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"setProjectMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setProjectOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"setProjectProps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"decrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increase\",\"type\":\"uint256\"}],\"name\":\"setProjectReserveImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"escrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"checksum\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct ArmadaProject[]\",\"name\":\"projects\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"creators\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"revokeImporterRole\",\"type\":\"bool\"}],\"name\":\"unsafeImportData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"unsafeSetEscrows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ArmadaRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"unsafeSetRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawProjectEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createProject((address,string,string,string,bytes32,string))\":{\"details\":\"Does not check name or email for validity or uniqueness\"},\"depositProjectEscrow(bytes32,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().\"},\"getProject(bytes32)\":{\"details\":\"Reverts if the id is unknown\"},\"getProjects(uint256,uint256)\":{\"details\":\"Truncates the results if skip or size are out of bounds\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address[],address,bool)\":{\"details\":\"Called once to set up the contract. Not called during proxy upgrades.\",\"params\":{\"grantImporterRole\":\"allows the contract deployer to import initial data into the contract using unsafeImport* functions, which is used for proxy-less upgrades. CAUTION: Once import is finished, the importer role should be explicitly revoked.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setProjectProps(bytes32,string,string)\":{\"details\":\"Does not check name or email for validity or uniqueness\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unsafeImportData((bytes32,address,string,string,uint256,uint256,string,bytes32,string)[],address[],bool)\":{\"details\":\"Allows to import initial contract data. Used for proxy-less upgrades.\",\"params\":{\"creators\":\"Adding the zero address will allow anyone to create projects.\",\"revokeImporterRole\":\"stops further data import by revoking the role. CAUTION: Once import is finished, the role should be explicitly revoked.\"}},\"unsafeSetEscrows(uint256,uint256,uint256,uint256)\":{\"details\":\"Adjusts multiple projects escrows relative to their current values.CAUTION: This can break data consistency. Used for proxy-less upgrades.\"},\"unsafeSetRegistry(address)\":{\"details\":\"CAUTION: This can break data consistency. Used for proxy-less upgrades.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Entry point for managing projects that host content on the network\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createProject((address,string,string,string,bytes32,string))\":{\"notice\":\"Registers a new project. Requires project creator role.\"},\"deleteProject(bytes32)\":{\"notice\":\"Unregisters a project. Reverts if project has escrow or reservations.\"},\"depositProjectEscrow(bytes32,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Transfers USDC into the contract and applies them toward given operator stake.\"},\"setProjectContent(bytes32,string,bytes32)\":{\"notice\":\"Publishes new content on the network\"},\"setProjectMetadata(bytes32,string)\":{\"notice\":\"Sets project metadata\"},\"withdrawProjectEscrow(bytes32,uint256,address)\":{\"notice\":\"Transfers escrow from contract to given recipient. Reverts if escrow is reserved.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArmadaProjects.sol\":\"ArmadaProjects\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../governance/utils/IVotes.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is IVotes, ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x7fd2492be0468be4662081ee25cde38a31e4a0ceca0fed10160462389013910f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x07536242e24ee7067295d32c08e495a33e605f3c52f8ee4ec3bdcb7a351313d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/ArmadaBilling.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./ArmadaNodes.sol\\\";\\nimport \\\"./ArmadaProjects.sol\\\";\\nimport \\\"./ArmadaRegistry.sol\\\";\\nimport \\\"./ArmadaReservations.sol\\\";\\nimport \\\"./ArmadaTypes.sol\\\";\\n\\n/// @title Entry point for managing node reservations by projects\\ncontract ArmadaBilling is AccessControlUpgradeable, PausableUpgradeable, UUPSUpgradeable {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  // Controls who in addition to topology nodes can reconcile the network. Grant to zero address to allow everybody.\\n  bytes32 public constant RECONCILER_ROLE = keccak256(\\\"RECONCILER_ROLE\\\");\\n\\n  ArmadaRegistry private _registry;\\n\\n  uint256 private _billingNodeIndex; // Ensures consistency during incremental reconciliation\\n  uint256 private _renewalNodeIndex; // Ensures consistency during incremental reconciliation\\n\\n  event ReservationCanceled(bytes32 indexed nodeId, bytes32 indexed operatorId, bytes32 indexed projectId, uint256 price);\\n  event ReservationResolved(bytes32 indexed nodeId, bytes32 indexed operatorId, bytes32 indexed projectId, uint256 price,\\n    uint256 uptime, uint256 payout, uint256 epochStart);\\n\\n  modifier onlyImpl {\\n    require(msg.sender == address(_registry), \\\"not impl\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdmin {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"not admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyReconcilerOrTopologyNode(bytes32 nodeIdOrZero) {\\n    if (nodeIdOrZero == 0) {\\n      require(\\n        hasRole(RECONCILER_ROLE, address(0)) ||\\n        hasRole(RECONCILER_ROLE, msg.sender),\\n        \\\"not reconciler\\\");\\n    } else {\\n      _registry.getOperators().requireTopologyNode(nodeIdOrZero, msg.sender);\\n    }\\n    _;\\n  }\\n\\n  modifier whenReconciling() {\\n    _registry.requireReconciling();\\n    _;\\n  }\\n\\n  /// @dev Called once to set up the contract. Not called during proxy upgrades.\\n  function initialize(address[] calldata admins, ArmadaRegistry registry)\\n  public initializer {\\n    __Context_init();\\n    __ERC165_init();\\n    __ERC1967Upgrade_init();\\n    __AccessControl_init();\\n    __Pausable_init();\\n    __UUPSUpgradeable_init();\\n\\n    _registry = registry;\\n    require(admins.length > 0, \\\"no admins\\\");\\n    for (uint256 i = 0; i < admins.length; ++i) {\\n      require(admins[i] != address(0), \\\"zero admin\\\");\\n      _grantRole(DEFAULT_ADMIN_ROLE, admins[i]);\\n    }\\n  }\\n\\n  /// @dev Reverts if proxy upgrade of this contract by msg.sender is not allowed\\n  function _authorizeUpgrade(address) internal virtual override onlyAdmin {}\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetRegistry(ArmadaRegistry registry) public virtual onlyAdmin { _registry = registry; }\\n\\n  function pause() public virtual onlyAdmin { _pause(); }\\n  function unpause() public virtual onlyAdmin { _unpause(); }\\n\\n  function getRegistry() public virtual view returns (ArmadaRegistry) { return _registry; }\\n  function getBillingNodeIndex() public virtual view returns (uint256) { return _billingNodeIndex; }\\n  function getRenewalNodeIndex() public virtual view returns (uint256) { return _renewalNodeIndex; }\\n  function setBillingNodeIndexImpl(uint256 index) public virtual onlyImpl { _billingNodeIndex = index; }\\n  function setRenewalNodeIndexImpl(uint256 index) public virtual onlyImpl { _renewalNodeIndex = index; }\\n\\n  /// @notice Called by the leader topology node to disburse escrow payments to operators.\\n  /// @dev This must be called sequentially and fully, for all the nodes in the network.\\n  /// @dev See ArmadaRegistry.advanceEpoch() for more details about reconciliation process.\\n  /// @param topologyNodeId The topology node calling this function (zero is OK if caller has reconciler role)\\n  /// @param nodeIds Content nodes being reported\\n  /// @param uptimeBips Uptime of corresponding content node in basis points (1 is 0.01%)\\n  /// @dev Note that uptimeBips is ignored (forced to 100%) if RECONCILER_ROLE is granted to zero address.\\n  function processBilling(bytes32 topologyNodeId, bytes32[] memory nodeIds, uint256[] memory uptimeBips)\\n  public virtual onlyReconcilerOrTopologyNode(topologyNodeId) whenReconciling whenNotPaused {\\n    ArmadaNodes allNodes = _registry.getNodes();\\n    ArmadaProjects projects = _registry.getProjects();\\n    ArmadaOperators operators = _registry.getOperators();\\n    require(_renewalNodeIndex == 0, \\\"renewal in progress\\\");\\n    require(_billingNodeIndex < allNodes.getNodeCount(0, false), \\\"billing finished\\\");\\n    uint256 lastEpochStart = _registry.getLastEpochStart();\\n    bool everybody = hasRole(RECONCILER_ROLE, address(0));\\n    for (uint256 i = 0; i < nodeIds.length; i++) {\\n      ArmadaNode[] memory nodeCopy0 = allNodes.getNodes(0, false, _billingNodeIndex++, 1);\\n      ArmadaNode memory nodeCopy = allNodes.getNode(nodeIds[i]);\\n      require(nodeCopy.id == nodeCopy0[0].id, \\\"order mismatch\\\");\\n      require(uptimeBips[i] <= 10000, \\\"invalid uptime\\\");\\n      if (nodeCopy.projectIds[ARMADA_LAST_EPOCH] != 0) {\\n        bytes32 projectId = nodeCopy.projectIds[ARMADA_LAST_EPOCH];\\n        uint256 uptimeBip = everybody ? 10000 : uptimeBips[i];\\n        uint256 payout = nodeCopy.prices[ARMADA_LAST_EPOCH] * uptimeBip / 10000;\\n        projects.setProjectEscrowImpl(projectId, payout, 0);\\n        projects.setProjectReserveImpl(projectId, nodeCopy.prices[ARMADA_LAST_EPOCH], 0);\\n        operators.setOperatorBalanceImpl(nodeCopy.operatorId, 0, payout);\\n        emit ReservationResolved(nodeCopy.id, nodeCopy.operatorId, projectId, nodeCopy.prices[ARMADA_LAST_EPOCH],\\n          uptimeBip, payout, lastEpochStart);\\n        if (nodeCopy.projectIds[ARMADA_NEXT_EPOCH] != projectId) {\\n          assert(_registry.getReservations().removeProjectNodeIdImpl(projectId, nodeCopy.id));\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Called by the leader topology node to roll over reservations between epochs.\\n  /// @dev This must be called sequentially and fully, for all the nodes in the network.\\n  /// @dev See ArmadaRegistry.advanceEpoch() for more details about reconciliation process.\\n  /// @param topologyNodeId The topology node calling this function (zero is OK if caller has reconciler role)\\n  /// @param nodeIds Content nodes being reported\\n  function processRenewal(bytes32 topologyNodeId, bytes32[] memory nodeIds)\\n  public virtual onlyReconcilerOrTopologyNode(topologyNodeId) whenReconciling whenNotPaused {\\n    ArmadaNodes allNodes = _registry.getNodes();\\n    ArmadaProjects projects = _registry.getProjects();\\n    require(_billingNodeIndex == allNodes.getNodeCount(0, false), \\\"billing in progress\\\");\\n    require(_renewalNodeIndex < allNodes.getNodeCount(0, false), \\\"renewal finished\\\");\\n    bool epochLengthChanged = _registry.getNextEpochLength() != _registry.getCuedEpochLength();\\n    for (uint256 i = 0; i < nodeIds.length; i++) {\\n      allNodes.advanceNodeEpochImpl(nodeIds[i]);\\n      ArmadaNode[] memory nodeCopy0 = allNodes.getNodes(0, false, _renewalNodeIndex++, 1);\\n      ArmadaNode memory nodeCopy = allNodes.getNode(nodeIds[i]);\\n      require(nodeCopy.id == nodeCopy0[0].id, \\\"order mismatch\\\");\\n      if (nodeCopy.projectIds[ARMADA_NEXT_EPOCH] != 0) {\\n        bytes32 projectId = nodeCopy.projectIds[ARMADA_NEXT_EPOCH];\\n        uint256 nextPrice = nodeCopy.prices[ARMADA_NEXT_EPOCH];\\n        if (epochLengthChanged) {\\n          nextPrice /= _registry.getNextEpochLength();\\n          nextPrice *= _registry.getCuedEpochLength();\\n          allNodes.setNodePriceImpl(nodeCopy.id, ARMADA_NEXT_EPOCH, nextPrice);\\n        }\\n        projects.setProjectReserveImpl(projectId, 0, nextPrice);\\n        ArmadaProject memory projectCopy = projects.getProject(projectId);\\n        if (projectCopy.escrow < projectCopy.reserve) {\\n          allNodes.setNodeProjectImpl(nodeCopy.id, ARMADA_NEXT_EPOCH, 0);\\n          projects.setProjectReserveImpl(projectId, nextPrice, 0);\\n          emit ReservationCanceled(nodeCopy.id, nodeCopy.operatorId, projectId, nodeCopy.prices[ARMADA_LAST_EPOCH]);\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x42b58f768aa343572354876b41ae6b7f04c2d6a52a3ab051b7c141ceb5c537b3\",\"license\":\"UNLICENSED\"},\"contracts/ArmadaNodes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./ArmadaRegistry.sol\\\";\\nimport \\\"./ArmadaNodesImpl.sol\\\";\\n\\n/// @title Entry point for managing instances of content nodes and topology nodes\\n/// @custom:oz-upgrades-unsafe-allow external-library-linking\\ncontract ArmadaNodes is AccessControlUpgradeable, PausableUpgradeable, UUPSUpgradeable {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  // Controls who can do data import during contract initialization\\n  bytes32 public constant IMPORTER_ROLE = keccak256(\\\"IMPORTER_ROLE\\\");\\n\\n  // Any operator can run content nodes, but only some are allowed to run topology nodes\\n  bytes32 public constant TOPOLOGY_CREATOR_ROLE = keccak256(\\\"TOPOLOGY_CREATOR_ROLE\\\");\\n\\n  ArmadaRegistry private _registry;\\n\\n  mapping(bytes32 => ArmadaNode) private _nodes;\\n  EnumerableSet.Bytes32Set private _contentNodeIds;\\n  EnumerableSet.Bytes32Set private _topologyNodeIds;\\n\\n  mapping(bytes32 => EnumerableSet.Bytes32Set) private _operatorContentNodeIds;\\n  mapping(bytes32 => EnumerableSet.Bytes32Set) private _operatorTopologyNodeIds;\\n\\n  // NOTE: These events must match the corresponding events in ArmadaNodesImpl library\\n  event NodeCreated(bytes32 indexed nodeId, bytes32 indexed operatorId, string host, string region, bool topology, bool disabled, uint256 price);\\n  event NodeDeleted(bytes32 indexed nodeId, bytes32 indexed operatorId, string host, string region, bool topology, bool disabled, uint256 price);\\n  event NodeHostChanged(bytes32 indexed nodeId, string oldHost, string oldRegion, string newHost, string newRegion);\\n  event NodePriceChanged(bytes32 indexed nodeId, uint256 oldLastPrice, uint256 oldNextPrice, uint256 newPrice, ArmadaSlot slot);\\n  event NodeDisabledChanged(bytes32 indexed nodeId, bool oldDisabled, bool newDisabled);\\n\\n  modifier onlyImpl {\\n    require(\\n      msg.sender == address(_registry.getBilling()) ||\\n      msg.sender == address(_registry.getOperators()) ||\\n      msg.sender == address(_registry.getProjects()) ||\\n      msg.sender == address(_registry.getReservations()),\\n      \\\"not impl\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdmin {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"not admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyOperator(bytes32 operatorId) {\\n    ArmadaOperators operators = _registry.getOperators();\\n    ArmadaOperator memory operator = operators.getOperator(operatorId);\\n    require(msg.sender == operator.owner, \\\"not operator\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdminOrOperator(bytes32 operatorId) {\\n    ArmadaOperators operators = _registry.getOperators();\\n    ArmadaOperator memory operator = operators.getOperator(operatorId);\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\\n      msg.sender == operator.owner, \\\"not admin or operator\\\");\\n    _;\\n  }\\n\\n  modifier whenNotReconciling() {\\n    _registry.requireNotReconciling();\\n    _;\\n  }\\n\\n  /// @dev Called once to set up the contract. Not called during proxy upgrades.\\n  ///\\n  /// @param grantImporterRole allows the contract deployer to import initial data into\\n  /// the contract using unsafeImport* functions, which is used for proxy-less upgrades.\\n  /// CAUTION: Once import is finished, the importer role should be explicitly revoked.\\n  function initialize(address[] calldata admins, ArmadaRegistry registry, bool grantImporterRole)\\n  public initializer {\\n    __Context_init();\\n    __ERC165_init();\\n    __ERC1967Upgrade_init();\\n    __AccessControl_init();\\n    __Pausable_init();\\n    __UUPSUpgradeable_init();\\n\\n    _registry = registry;\\n    require(admins.length > 0, \\\"no admins\\\");\\n    for (uint256 i = 0; i < admins.length; ++i) {\\n      require(admins[i] != address(0), \\\"zero admin\\\");\\n      _grantRole(DEFAULT_ADMIN_ROLE, admins[i]);\\n    }\\n\\n    if (grantImporterRole) {\\n      // solhint-disable-next-line avoid-tx-origin\\n      _grantRole(IMPORTER_ROLE, tx.origin); // Only the contract deployer will have this role\\n      _setRoleAdmin(IMPORTER_ROLE, IMPORTER_ROLE); // Admin must not be able to grant this role\\n    }\\n  }\\n\\n  /// @dev Reverts if proxy upgrade of this contract by msg.sender is not allowed\\n  function _authorizeUpgrade(address) internal virtual override onlyAdmin {}\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetRegistry(ArmadaRegistry registry) public virtual onlyAdmin { _registry = registry; }\\n\\n  /// @dev Allows to import initial contract data. Used for proxy-less upgrades.\\n  /// @param revokeImporterRole stops further data import by revoking the role.\\n  /// CAUTION: Once import is finished, the role should be explicitly revoked.\\n  function unsafeImportData(ArmadaNode[] calldata nodes, address[] calldata topologyCreators, bool revokeImporterRole)\\n  public onlyRole(IMPORTER_ROLE) {\\n    for (uint256 i = 0; i < nodes.length; i++) {\\n      bytes32 nodeId = nodes[i].id;\\n      _nodes[nodeId] = nodes[i];\\n      require(getNodeIdsRef(nodes[i].topology).add(nodeId), \\\"duplicate id\\\");\\n      assert(getOperatorNodeIdsRef(nodes[i].topology)[nodes[i].operatorId].add(nodeId));\\n    }\\n    for (uint256 i = 0; i < topologyCreators.length; i++) {\\n      _grantRole(TOPOLOGY_CREATOR_ROLE, topologyCreators[i]);\\n    }\\n    if (revokeImporterRole) {\\n      _revokeRole(IMPORTER_ROLE, msg.sender);\\n    }\\n  }\\n\\n  /// @dev Adjusts multiple content nodes prices relative to their current values.\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetPrices(uint256 skip, uint256 size, uint256 mul, uint256 div)\\n  public virtual onlyAdmin {\\n    require(mul != 0, \\\"zero mul\\\");\\n    uint256 length = _contentNodeIds.length();\\n    uint256 n = Math.min(size, length > skip ? length - skip : 0);\\n    for (uint256 i = 0; i < n; i++) {\\n      ArmadaNode storage node = _nodes[_contentNodeIds.at(skip + i)];\\n      node.prices[ARMADA_LAST_EPOCH] = node.prices[ARMADA_LAST_EPOCH] * mul / div;\\n      node.prices[ARMADA_NEXT_EPOCH] = node.prices[ARMADA_NEXT_EPOCH] * mul / div;\\n    }\\n  }\\n\\n  function pause() public virtual onlyAdmin { _pause(); }\\n  function unpause() public virtual onlyAdmin { _unpause(); }\\n\\n  function getRegistry() public virtual view returns (ArmadaRegistry) { return _registry; }\\n\\n  function getNodeIdsRef(bool topology)\\n  internal virtual view returns (EnumerableSet.Bytes32Set storage) {\\n    return topology ? _topologyNodeIds : _contentNodeIds;\\n  }\\n\\n  function getOperatorNodeIdsRef(bool topology)\\n  internal virtual view returns (mapping(bytes32 => EnumerableSet.Bytes32Set) storage) {\\n    return topology ? _operatorTopologyNodeIds : _operatorContentNodeIds;\\n  }\\n\\n  function setNodePriceImpl(bytes32 nodeId, uint256 epochSlot, uint256 price)\\n  public virtual onlyImpl whenNotPaused {\\n    ArmadaNode storage node = _nodes[nodeId];\\n    require(node.id != 0, \\\"unknown node\\\");\\n    require(!node.topology, \\\"topology node\\\");\\n    node.prices[epochSlot] = price;\\n  }\\n\\n  function setNodeProjectImpl(bytes32 nodeId, uint256 epochSlot, bytes32 projectId)\\n  public virtual onlyImpl whenNotPaused {\\n    ArmadaNode storage node = _nodes[nodeId];\\n    require(node.id != 0, \\\"unknown node\\\");\\n    require(!node.topology, \\\"topology node\\\");\\n    node.projectIds[epochSlot] = projectId;\\n  }\\n\\n  function advanceNodeEpochImpl(bytes32 nodeId)\\n  public virtual onlyImpl whenNotPaused {\\n    ArmadaNode storage node = _nodes[nodeId];\\n    require(node.id != 0, \\\"unknown node\\\");\\n    require(!node.topology, \\\"topology node\\\");\\n    if (node.projectIds[ARMADA_LAST_EPOCH] != node.projectIds[ARMADA_NEXT_EPOCH])\\n      node.projectIds[ARMADA_LAST_EPOCH] = node.projectIds[ARMADA_NEXT_EPOCH];\\n    if (node.prices[ARMADA_LAST_EPOCH] != node.prices[ARMADA_NEXT_EPOCH])\\n      node.prices[ARMADA_LAST_EPOCH] = node.prices[ARMADA_NEXT_EPOCH];\\n  }\\n\\n  /// @notice Registers new nodes on the network and locks operator stake. Reverts if stake is insufficient.\\n  /// @dev Does not check host or region for validity or uniqueness\\n  function createNodes(bytes32 operatorId, bool topology, ArmadaCreateNodeData[] memory nodes)\\n  public virtual onlyOperator(operatorId) whenNotReconciling whenNotPaused returns (bytes32[] memory nodeIds) {\\n    require(!topology || hasRole(TOPOLOGY_CREATOR_ROLE, msg.sender), \\\"not topology creator\\\");\\n    if (!topology) {\\n      ArmadaOperators operators = _registry.getOperators();\\n      ArmadaOperator memory operatorCopy = operators.getOperator(operatorId);\\n      uint256 nodeCount = _operatorContentNodeIds[operatorId].length() + nodes.length;\\n      uint256 lockedStake = nodeCount * operators.getStakePerNode();\\n      require(operatorCopy.stake >= lockedStake, \\\"not enough stake\\\");\\n    }\\n    nodeIds = new bytes32[](nodes.length);\\n    for (uint256 i = 0; i < nodes.length; i++) {\\n      ArmadaCreateNodeData memory node = nodes[i];\\n      require(node.topology == topology, \\\"topology mismatch\\\");\\n      require(!node.topology || node.price == 0, \\\"topology price\\\");\\n      require(bytes(node.host).length > 0, \\\"empty host\\\");\\n      require(bytes(node.host).length <= ARMADA_MAX_HOST_BYTES, \\\"host too long\\\");\\n      require(bytes(node.region).length > 0, \\\"empty region\\\");\\n      require(bytes(node.region).length <= ARMADA_MAX_REGION_BYTES, \\\"region too long\\\");\\n      bytes32 nodeId = keccak256(abi.encodePacked(_registry.newNonceImpl()));\\n      _nodes[nodeId] = ArmadaNode({\\n        id: nodeId, operatorId: operatorId, host: node.host, region: node.region, topology: node.topology,\\n        disabled: node.disabled, prices: [node.price, node.price], projectIds: [bytes32(0), bytes32(0)]\\n      });\\n      assert(getNodeIdsRef(node.topology).add(nodeId));\\n      assert(getOperatorNodeIdsRef(node.topology)[operatorId].add(nodeId));\\n      emit NodeCreated(nodeId, operatorId, node.host, node.region, node.topology, node.disabled, node.price);\\n      nodeIds[i] = nodeId;\\n    }\\n  }\\n\\n  /// @notice Unregisters nodes from the network and unlocks operator stake. Reverts if nodes are reserved.\\n  function deleteNodes(bytes32 operatorId, bool topology, bytes32[] memory nodeIds)\\n  public virtual onlyOperator(operatorId) whenNotReconciling whenNotPaused {\\n    require(!topology || hasRole(TOPOLOGY_CREATOR_ROLE, msg.sender), \\\"not topology creator\\\");\\n    for (uint256 i = 0; i < nodeIds.length; i++) {\\n      bytes32 nodeId = nodeIds[i];\\n      ArmadaNode memory nodeCopy = _nodes[nodeId];\\n      require(nodeCopy.id != 0, \\\"unknown node\\\");\\n      require(nodeCopy.operatorId == operatorId, \\\"operator mismatch\\\");\\n      require(nodeCopy.topology == topology, \\\"topology mismatch\\\");\\n      require(nodeCopy.projectIds[ARMADA_LAST_EPOCH] == 0 &&\\n        nodeCopy.projectIds[ARMADA_NEXT_EPOCH] == 0, \\\"node reserved\\\");\\n      delete _nodes[nodeId];\\n      assert(getNodeIdsRef(nodeCopy.topology).remove(nodeId));\\n      assert(getOperatorNodeIdsRef(nodeCopy.topology)[operatorId].remove(nodeId));\\n      emit NodeDeleted(nodeId, nodeCopy.operatorId, nodeCopy.host, nodeCopy.region, nodeCopy.topology,\\n        nodeCopy.disabled, nodeCopy.prices[ARMADA_NEXT_EPOCH]);\\n    }\\n  }\\n\\n  /// @notice Changes content node or topology node hosts and regions. Reverts if nodes are reserved (unless admin).\\n  /// @dev Does not check host or region for validity or uniqueness\\n  function setNodeHosts(bytes32 operatorId, bytes32[] memory nodeIds, string[] memory hosts, string[] memory regions)\\n  public virtual onlyAdminOrOperator(operatorId) whenNotReconciling whenNotPaused {\\n    bool admin = hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    ArmadaNodesImpl.setNodeHostsImpl(_nodes, admin, operatorId, nodeIds, hosts, regions);\\n  }\\n\\n  /// @notice Changes content node prices: spot price (current epoch only), renewal price (starting from next epoch).\\n  /// Reverts if changing the spot price and the nodes are already reserved in the current epoch.\\n  /// Reverts if changing the renewal price too close before next epoch start, as set by ArmadaRegistry gracePeriod.\\n  /// Cancels node renewal if the node price went up and the project escrow is no longer enough.\\n  /// @param slot specifies which type of node prices to change - spot price, renewal price, or both.\\n  function setNodePrices(bytes32 operatorId, bytes32[] memory nodeIds, uint256[] memory prices, ArmadaSlot calldata slot)\\n  public virtual onlyOperator(operatorId) whenNotReconciling whenNotPaused {\\n    ArmadaNodesImpl.setNodePricesImpl(_registry, _nodes, operatorId, nodeIds, prices, slot);\\n  }\\n\\n  /// @notice Disabled nodes won't take new reservations and won't renew when epoch ends.\\n  /// Disabled nodes will still keep their current reservations until the end of the current epoch.\\n  /// Reenabled nodes will not retain their old reservations, and will need to be reserved again.\\n  /// Reverts if enabling or disabling nodes too close before next epoch start, as set by ArmadaRegistry gracePeriod.\\n  function setNodeDisabled(bytes32 operatorId, bytes32[] memory nodeIds, bool[] memory disabled)\\n  public virtual onlyOperator(operatorId) whenNotReconciling whenNotPaused {\\n    ArmadaNodesImpl.setNodeDisabledImpl(_registry, _nodes, operatorId, nodeIds, disabled);\\n  }\\n\\n  /// @dev Reverts if the id is unknown\\n  function getNode(bytes32 nodeId)\\n  public virtual view returns (ArmadaNode memory) {\\n    ArmadaNode storage node = _nodes[nodeId];\\n    require(node.id != 0, \\\"unknown node\\\");\\n    return node;\\n  }\\n\\n  function getNodeCount(bytes32 operatorIdOrZero, bool topology)\\n  public virtual view returns (uint256 count) {\\n    EnumerableSet.Bytes32Set storage nodeIds = operatorIdOrZero == 0 ?\\n      getNodeIdsRef(topology) : getOperatorNodeIdsRef(topology)[operatorIdOrZero];\\n    return nodeIds.length();\\n  }\\n\\n  /// @dev Truncates the results if skip or size are out of bounds\\n  function getNodes(bytes32 operatorIdOrZero, bool topology, uint256 skip, uint256 size)\\n  public virtual view returns (ArmadaNode[] memory values) {\\n    EnumerableSet.Bytes32Set storage nodeIds = operatorIdOrZero == 0 ?\\n      getNodeIdsRef(topology) : getOperatorNodeIdsRef(topology)[operatorIdOrZero];\\n    uint256 length = nodeIds.length();\\n    uint256 n = Math.min(size, length > skip ? length - skip : 0);\\n    values = new ArmadaNode[](n);\\n    for (uint256 i = 0; i < n; i++) {\\n      values[i] = _nodes[nodeIds.at(skip + i)];\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8fe8d4a9fbd9242a39b21c9116da04a030383789ac1bf635aa0b2e85d24648ab\",\"license\":\"UNLICENSED\"},\"contracts/ArmadaNodesImpl.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ArmadaRegistry.sol\\\";\\nimport \\\"./ArmadaNodes.sol\\\";\\n\\n/// @title Internal helper library to reduce deployent size of ArmadaNodes contract\\nlibrary ArmadaNodesImpl {\\n  // NOTE: These events must match the corresponding events in ArmadaNodes contract\\n  event NodeHostChanged(bytes32 indexed nodeId, string oldHost, string oldRegion, string newHost, string newRegion);\\n  event NodePriceChanged(bytes32 indexed nodeId, uint256 oldLastPrice, uint256 oldNextPrice, uint256 newPrice, ArmadaSlot slot);\\n  event NodeDisabledChanged(bytes32 indexed nodeId, bool oldDisabled, bool newDisabled);\\n\\n  function setNodeHostsImpl(\\n    mapping(bytes32 => ArmadaNode) storage _nodes, bool admin,\\n    bytes32 operatorId, bytes32[] memory nodeIds, string[] memory hosts, string[] memory regions)\\n  public {\\n    require(nodeIds.length == hosts.length, \\\"length mismatch\\\");\\n    require(nodeIds.length == regions.length, \\\"length mismatch\\\");\\n    for (uint256 i = 0; i < nodeIds.length; i++) {\\n      require(bytes(hosts[i]).length > 0, \\\"empty host\\\");\\n      require(bytes(hosts[i]).length <= ARMADA_MAX_HOST_BYTES, \\\"host too long\\\");\\n      require(bytes(regions[i]).length > 0, \\\"empty region\\\");\\n      require(bytes(regions[i]).length <= ARMADA_MAX_REGION_BYTES, \\\"region too long\\\");\\n      ArmadaNode storage node = _nodes[nodeIds[i]];\\n      require(node.id != 0, \\\"unknown node\\\");\\n      require(node.operatorId == operatorId, \\\"operator mismatch\\\");\\n      require(admin || (node.projectIds[ARMADA_LAST_EPOCH] == 0 &&\\n        node.projectIds[ARMADA_NEXT_EPOCH] == 0), \\\"node reserved\\\");\\n      string memory oldHost = node.host;\\n      string memory oldRegion = node.region;\\n      node.host = hosts[i];\\n      node.region = regions[i];\\n      emit NodeHostChanged(node.id, oldHost, oldRegion, hosts[i], regions[i]);\\n    }\\n  }\\n\\n  function setNodePricesImpl(\\n    ArmadaRegistry _registry, mapping(bytes32 => ArmadaNode) storage _nodes,\\n    bytes32 operatorId, bytes32[] memory nodeIds, uint256[] memory prices, ArmadaSlot calldata slot)\\n  public {\\n    require(nodeIds.length == prices.length, \\\"length mismatch\\\");\\n    ArmadaNodes allNodes = _registry.getNodes();\\n    ArmadaProjects projects = _registry.getProjects();\\n    ArmadaReservations reservations = _registry.getReservations();\\n    for (uint256 i = 0; i < nodeIds.length; i++) {\\n      ArmadaNode storage node = _nodes[nodeIds[i]];\\n      require(node.id != 0, \\\"unknown node\\\");\\n      require(node.operatorId == operatorId, \\\"operator mismatch\\\");\\n      require(!node.topology, \\\"topology node\\\");\\n      uint256 oldLastPrice = node.prices[ARMADA_LAST_EPOCH];\\n      uint256 oldNextPrice = node.prices[ARMADA_NEXT_EPOCH];\\n      if (slot.last) {\\n        require(node.projectIds[ARMADA_LAST_EPOCH] == 0, \\\"node reserved\\\");\\n        node.prices[ARMADA_LAST_EPOCH] = prices[i];\\n      }\\n      if (slot.next) {\\n        node.prices[ARMADA_NEXT_EPOCH] = prices[i];\\n        bytes32 projectId = node.projectIds[ARMADA_NEXT_EPOCH];\\n        if (projectId != 0) {\\n          projects.setProjectReserveImpl(projectId, oldNextPrice, prices[i]);\\n          ArmadaProject memory projectCopy = projects.getProject(projectId);\\n          if (projectCopy.escrow < projectCopy.reserve) {\\n            _registry.requireNotGracePeriod();\\n            ArmadaSlot memory slot_ = ArmadaSlot({ last: false, next: true });\\n            reservations.deleteReservationImpl(allNodes, projects, projectId, node.id, slot_);\\n          }\\n        }\\n      }\\n      emit NodePriceChanged(node.id, oldLastPrice, oldNextPrice, prices[i], slot);\\n    }\\n  }\\n\\n  function setNodeDisabledImpl(\\n    ArmadaRegistry _registry, mapping(bytes32 => ArmadaNode) storage _nodes,\\n    bytes32 operatorId, bytes32[] memory nodeIds, bool[] memory disabled)\\n  public {\\n    require(nodeIds.length == disabled.length, \\\"length mismatch\\\");\\n    ArmadaNodes allNodes = _registry.getNodes();\\n    ArmadaProjects projects = _registry.getProjects();\\n    ArmadaReservations reservations = _registry.getReservations();\\n    for (uint256 i = 0; i < nodeIds.length; i++) {\\n      ArmadaNode storage node = _nodes[nodeIds[i]];\\n      require(node.id != 0, \\\"unknown node\\\");\\n      require(node.operatorId == operatorId, \\\"operator mismatch\\\");\\n      bool oldDisabled = node.disabled;\\n      node.disabled = disabled[i];\\n      bytes32 projectId = node.projectIds[ARMADA_NEXT_EPOCH];\\n      if (projectId != 0) {\\n        _registry.requireNotGracePeriod();\\n        ArmadaSlot memory slot_ = ArmadaSlot({ last: false, next: true });\\n        reservations.deleteReservationImpl(allNodes, projects, projectId, node.id, slot_);\\n      }\\n      emit NodeDisabledChanged(node.id, oldDisabled, disabled[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xdeda4dcb94cda6e4e9403fa672a77e20c0ee44fc6aab17144ca7c53f3b4e49bc\",\"license\":\"UNLICENSED\"},\"contracts/ArmadaOperators.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./ArmadaNodes.sol\\\";\\nimport \\\"./ArmadaProjects.sol\\\";\\nimport \\\"./ArmadaRegistry.sol\\\";\\nimport \\\"./ArmadaReservations.sol\\\";\\nimport \\\"./ArmadaTypes.sol\\\";\\n\\n/// @title Entry point for managing network node operators\\ncontract ArmadaOperators is AccessControlUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  // Controls who can do data import during contract initialization\\n  bytes32 public constant IMPORTER_ROLE = keccak256(\\\"IMPORTER_ROLE\\\");\\n\\n  ArmadaRegistry private _registry;\\n  uint256 private _stakePerNode; // Required stake to run one content node on the network\\n\\n  mapping(bytes32 => ArmadaOperator) private _operators;\\n  EnumerableSet.Bytes32Set private _operatorIds;\\n\\n  event OperatorCreated(bytes32 indexed operatorId, address indexed owner, string name, string email);\\n  event OperatorDeleted(bytes32 indexed operatorId, address indexed owner, string name, string email);\\n  event OperatorOwnerChanged(bytes32 indexed operatorId, address indexed oldOwner, address indexed newOwner);\\n  event OperatorPropsChanged(bytes32 indexed operatorId, string oldName, string oldEmail, string newName, string newEmail);\\n  event OperatorStakeChanged(bytes32 indexed operatorId, uint256 oldStake, uint256 newStake);\\n  event OperatorBalanceChanged(bytes32 indexed operatorId, uint256 oldBalance, uint256 newBalance);\\n\\n  modifier onlyImpl {\\n    require(\\n      msg.sender == address(_registry.getBilling()) ||\\n      msg.sender == address(_registry.getNodes()) ||\\n      msg.sender == address(_registry.getProjects()) ||\\n      msg.sender == address(_registry.getReservations()),\\n      \\\"not impl\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdmin {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"not admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyOperator(bytes32 operatorId) {\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    require(operator.id != 0, \\\"unknown operator\\\");\\n    require(msg.sender == operator.owner, \\\"not operator\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdminOrOperator(bytes32 operatorId) {\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    require(operator.id != 0, \\\"unknown operator\\\");\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\\n      msg.sender == operator.owner, \\\"not admin or operator\\\");\\n    _;\\n  }\\n\\n  modifier whenNotReconciling() {\\n    _registry.requireNotReconciling();\\n    _;\\n  }\\n\\n  function requireTopologyNode(bytes32 nodeId, address sender) public virtual {\\n    ArmadaNodes nodes = _registry.getNodes();\\n    ArmadaNode memory nodeCopy = nodes.getNode(nodeId);\\n    require(nodeCopy.topology, \\\"not topology node\\\");\\n    ArmadaOperator storage operator = _operators[nodeCopy.operatorId];\\n    assert(operator.id != 0); // Impossible because of getNode()\\n    require(sender != address(0), \\\"zero sender\\\");\\n    require(operator.owner == sender, \\\"not operator\\\");\\n  }\\n\\n  /// @dev Called once to set up the contract. Not called during proxy upgrades.\\n  ///\\n  /// @param grantImporterRole allows the contract deployer to import initial data into\\n  /// the contract using unsafeImport* functions, which is used for proxy-less upgrades.\\n  /// CAUTION: Once import is finished, the importer role should be explicitly revoked.\\n  function initialize(address[] calldata admins, ArmadaRegistry registry, uint256 stakePerNode, bool grantImporterRole)\\n  public initializer {\\n    __Context_init();\\n    __ERC165_init();\\n    __ERC1967Upgrade_init();\\n    __AccessControl_init();\\n    __Pausable_init();\\n    __ReentrancyGuard_init();\\n    __UUPSUpgradeable_init();\\n\\n    _registry = registry;\\n    _stakePerNode = stakePerNode;\\n    require(admins.length > 0, \\\"no admins\\\");\\n    for (uint256 i = 0; i < admins.length; ++i) {\\n      require(admins[i] != address(0), \\\"zero admin\\\");\\n      _grantRole(DEFAULT_ADMIN_ROLE, admins[i]);\\n    }\\n\\n    if (grantImporterRole) {\\n      // solhint-disable-next-line avoid-tx-origin\\n      _grantRole(IMPORTER_ROLE, tx.origin); // Only the contract deployer will have this role\\n      _setRoleAdmin(IMPORTER_ROLE, IMPORTER_ROLE); // Admin must not be able to grant this role\\n    }\\n  }\\n\\n  /// @dev Reverts if proxy upgrade of this contract by msg.sender is not allowed\\n  function _authorizeUpgrade(address) internal virtual override onlyAdmin {}\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetRegistry(ArmadaRegistry registry) public virtual onlyAdmin { _registry = registry; }\\n\\n  /// @dev Allows to import initial contract data. Used for proxy-less upgrades.\\n  /// @param revokeImporterRole stops further data import by revoking the role.\\n  /// CAUTION: Once import is finished, the role should be explicitly revoked.\\n  function unsafeImportData(ArmadaOperator[] calldata operators, bool revokeImporterRole)\\n  public onlyRole(IMPORTER_ROLE) {\\n    for (uint256 i = 0; i < operators.length; i++) {\\n      _operators[operators[i].id] = operators[i];\\n      require(_operatorIds.add(operators[i].id), \\\"duplicate id\\\");\\n    }\\n    if (revokeImporterRole) {\\n      _revokeRole(IMPORTER_ROLE, msg.sender);\\n    }\\n  }\\n\\n  /// @dev Adjusts multiple operators balances relative to their current values.\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetBalances(uint256 skip, uint256 size, uint256 mul, uint256 div)\\n  public virtual onlyAdmin {\\n    require(mul != 0, \\\"zero mul\\\");\\n    uint256 length = _operatorIds.length();\\n    uint256 n = Math.min(size, length > skip ? length - skip : 0);\\n    for (uint256 i = 0; i < n; i++) {\\n      ArmadaOperator storage operator = _operators[_operatorIds.at(skip + i)];\\n      operator.balance = operator.balance * mul / div;\\n    }\\n  }\\n\\n  function pause() public virtual onlyAdmin { _pause(); }\\n  function unpause() public virtual onlyAdmin { _unpause(); }\\n\\n  function getRegistry() public virtual view returns (ArmadaRegistry) { return _registry; }\\n  function getStakePerNode() public virtual view returns (uint256) { return _stakePerNode; }\\n  function setStakePerNode(uint256 stake) public virtual onlyAdmin { _stakePerNode = stake; }\\n\\n  function setOperatorBalanceImpl(bytes32 operatorId, uint256 decrease, uint256 increase)\\n  public virtual onlyImpl whenNotPaused {\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    require(operator.id != 0, \\\"unknown operator\\\");\\n    operator.balance -= decrease;\\n    operator.balance += increase;\\n  }\\n\\n  /// @notice Registers a new network operator. Only admin can do this.\\n  /// @dev Does not check name or email for validity or uniqueness\\n  function createOperator(address owner, string calldata name, string calldata email)\\n  public onlyAdmin whenNotReconciling whenNotPaused returns (bytes32 operatorId) {\\n    require(owner != address(0), \\\"zero owner\\\");\\n    require(bytes(name).length > 0, \\\"empty name\\\");\\n    require(bytes(name).length <= ARMADA_MAX_NAME_BYTES, \\\"name too long\\\");\\n    require(bytes(email).length <= ARMADA_MAX_EMAIL_BYTES, \\\"email too long\\\");\\n    operatorId = keccak256(abi.encodePacked(_registry.newNonceImpl()));\\n    _operators[operatorId] = ArmadaOperator({id: operatorId, owner: owner, name: name, email: email, stake: 0, balance: 0});\\n    assert(_operatorIds.add(operatorId));\\n    emit OperatorCreated(operatorId, owner, name, email);\\n  }\\n\\n  /// @notice Unregisters a network operator. Reverts if operator has stake or nodes.\\n  function deleteOperator(bytes32 operatorId)\\n  public virtual onlyAdmin whenNotReconciling whenNotPaused {\\n    ArmadaOperator memory operatorCopy = _operators[operatorId];\\n    require(operatorCopy.id != 0, \\\"unknown operator\\\");\\n    ArmadaNodes nodes = _registry.getNodes();\\n    require(nodes.getNodeCount(operatorId, true) == 0, \\\"operator has nodes\\\");\\n    require(nodes.getNodeCount(operatorId, false) == 0, \\\"operator has nodes\\\");\\n    require(operatorCopy.stake == 0, \\\"operator has stake\\\");\\n    require(operatorCopy.balance == 0, \\\"operator has balance\\\");\\n    delete _operators[operatorId];\\n    assert(_operatorIds.remove(operatorId));\\n    emit OperatorDeleted(operatorId, operatorCopy.owner, operatorCopy.name, operatorCopy.email);\\n  }\\n\\n  function setOperatorOwner(bytes32 operatorId, address owner)\\n  public virtual onlyAdminOrOperator(operatorId) whenNotReconciling whenNotPaused {\\n    require(owner != address(0), \\\"zero owner\\\");\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    assert(operator.id != 0); // Impossible because of onlyAdminOrOperator\\n    address oldOwner = operator.owner;\\n    operator.owner = owner;\\n    emit OperatorOwnerChanged(operatorId, oldOwner, owner);\\n  }\\n\\n  /// @dev Does not check name or email for validity or uniqueness\\n  function setOperatorProps(bytes32 operatorId, string calldata name, string calldata email)\\n  public virtual onlyOperator(operatorId) whenNotReconciling whenNotPaused {\\n    require(bytes(name).length > 0, \\\"empty name\\\");\\n    require(bytes(name).length <= ARMADA_MAX_NAME_BYTES, \\\"name too long\\\");\\n    require(bytes(email).length <= ARMADA_MAX_EMAIL_BYTES, \\\"email too long\\\");\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    assert(operator.id != 0); // Impossible because of onlyOperator\\n    string memory oldName = operator.name;\\n    string memory oldEmail = operator.email;\\n    operator.name = name;\\n    operator.email = email;\\n    emit OperatorPropsChanged(operatorId, oldName, oldEmail, name, email);\\n  }\\n\\n  /// @notice Transfers tokens into the contract and applies them toward given operator stake.\\n  /// @dev Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).\\n  /// @dev CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().\\n  function depositOperatorStake(bytes32 operatorId, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n  public virtual whenNotPaused {\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    require(operator.id != 0, \\\"unknown operator\\\");\\n    uint256 oldStake = operator.stake;\\n    operator.stake += amount;\\n    if (s != 0) {\\n      _registry.getToken().permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    } else {\\n      require(deadline == 0 && v == 0 && r == 0, \\\"invalid permit\\\");\\n    }\\n    _registry.getToken().transferFrom(msg.sender, address(_registry), amount);\\n    emit OperatorStakeChanged(operatorId, oldStake, operator.stake);\\n  }\\n\\n  /// @notice Transfers stake from contract to given recipient. Reverts if stake is locked.\\n  function withdrawOperatorStake(bytes32 operatorId, uint256 amount, address to)\\n  public virtual nonReentrant onlyOperator(operatorId) whenNotReconciling whenNotPaused {\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    assert(operator.id != 0); // Impossible because of onlyOperator\\n    ArmadaNodes nodes = _registry.getNodes();\\n    uint256 lockedStake = nodes.getNodeCount(operatorId, false) * _stakePerNode;\\n    require(operator.stake - amount >= lockedStake, \\\"not enough stake\\\");\\n    uint256 oldStake = operator.stake;\\n    operator.stake -= amount;\\n    _registry.getToken().transferFrom(address(_registry), to, amount);\\n    emit OperatorStakeChanged(operatorId, oldStake, operator.stake);\\n  }\\n\\n  /// @notice Transfers USDC into the contract and applies them toward given operator balance.\\n  /// @dev Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).\\n  /// @dev CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().\\n  function depositOperatorBalance(bytes32 operatorId, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n  public virtual whenNotPaused {\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    require(operator.id != 0, \\\"unknown operator\\\");\\n    uint256 oldBalance = operator.balance;\\n    operator.balance += amount;\\n    if (s != 0) {\\n      _registry.getUSDC().permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    } else {\\n      require(deadline == 0 && v == 0 && r == 0, \\\"invalid permit\\\");\\n    }\\n    _registry.getUSDC().transferFrom(msg.sender, address(_registry), amount);\\n    emit OperatorBalanceChanged(operatorId, oldBalance, operator.balance);\\n  }\\n\\n  /// @notice Transfers earned USDC from contract to given recipient.\\n  function withdrawOperatorBalance(bytes32 operatorId, uint256 amount, address to)\\n  public virtual nonReentrant onlyOperator(operatorId) whenNotReconciling whenNotPaused {\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    assert(operator.id != 0); // Impossible because of onlyOperator\\n    require(operator.balance >= amount, \\\"not enough balance\\\");\\n    uint256 oldBalance = operator.balance;\\n    operator.balance -= amount;\\n    _registry.getUSDC().transferFrom(address(_registry), to, amount);\\n    emit OperatorBalanceChanged(operatorId, oldBalance, operator.balance);\\n  }\\n\\n  /// @dev Reverts if the id is unknown\\n  function getOperator(bytes32 operatorId)\\n  public virtual view returns (ArmadaOperator memory) {\\n    ArmadaOperator storage operator = _operators[operatorId];\\n    require(operator.id != 0, \\\"unknown operator\\\");\\n    return operator;\\n  }\\n\\n  function getOperatorCount()\\n  public virtual view returns (uint256) {\\n    return _operatorIds.length();\\n  }\\n\\n  /// @dev Truncates the results if skip or size are out of bounds\\n  function getOperators(uint256 skip, uint256 size)\\n  public virtual view returns (ArmadaOperator[] memory values) {\\n    uint256 length = _operatorIds.length();\\n    uint256 n = Math.min(size, length > skip ? length - skip : 0);\\n    values = new ArmadaOperator[](n);\\n    for (uint256 i = 0; i < n; i++) {\\n      values[i] = _operators[_operatorIds.at(skip + i)];\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1c67b67afbd3d2ad0f70f07500de9aeba8054ca5b18043886906f7102b518bd2\",\"license\":\"UNLICENSED\"},\"contracts/ArmadaProjects.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./ArmadaNodes.sol\\\";\\nimport \\\"./ArmadaOperators.sol\\\";\\nimport \\\"./ArmadaRegistry.sol\\\";\\nimport \\\"./ArmadaReservations.sol\\\";\\nimport \\\"./ArmadaTypes.sol\\\";\\n\\n/// @title Entry point for managing projects that host content on the network\\ncontract ArmadaProjects is AccessControlUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  // Controls who can do data import during contract initialization\\n  bytes32 public constant IMPORTER_ROLE = keccak256(\\\"IMPORTER_ROLE\\\");\\n\\n  // Project owners must first be allowed by admin before they can register projects\\n  bytes32 public constant PROJECT_CREATOR_ROLE = keccak256(\\\"PROJECT_CREATOR_ROLE\\\");\\n\\n  ArmadaRegistry private _registry;\\n\\n  mapping(bytes32 => ArmadaProject) private _projects;\\n  EnumerableSet.Bytes32Set private _projectIds;\\n\\n  event ProjectCreated(bytes32 indexed projectId, address indexed owner, string name, string email, string content, bytes32 checksum, string metadata);\\n  event ProjectDeleted(bytes32 indexed projectId, address indexed owner, string name, string email, string content, bytes32 checksum, string metadata);\\n  event ProjectOwnerChanged(bytes32 indexed projectId, address indexed oldOwner, address indexed newOwner);\\n  event ProjectPropsChanged(bytes32 indexed projectId, string oldName, string oldEmail, string newName, string newEmail);\\n  event ProjectEscrowChanged(bytes32 indexed projectId, uint256 oldEscrow, uint256 newEscrow);\\n  event ProjectContentChanged(bytes32 indexed projectId, string oldContent, bytes32 oldChecksum, string newContent, bytes32 newChecksum);\\n  event ProjectMetadataChanged(bytes32 indexed projectId, string oldMetadata, string newMetadata);\\n\\n  modifier onlyImpl {\\n    require(\\n      msg.sender == address(_registry.getBilling()) ||\\n      msg.sender == address(_registry.getNodes()) ||\\n      msg.sender == address(_registry.getOperators()) ||\\n      msg.sender == address(_registry.getReservations()),\\n      \\\"not impl\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdmin {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"not admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyProjectCreator {\\n    require(hasRole(PROJECT_CREATOR_ROLE, address(0)) ||\\n      hasRole(PROJECT_CREATOR_ROLE, msg.sender), \\\"not project creator\\\");\\n    _;\\n  }\\n\\n  modifier onlyProjectOwner(bytes32 projectId) {\\n    ArmadaProject storage project = _projects[projectId];\\n    require(project.id != 0, \\\"unknown project\\\");\\n    require(msg.sender == project.owner, \\\"not project owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdminOrProjectOwner(bytes32 projectId) {\\n    ArmadaProject storage project = _projects[projectId];\\n    require(project.id != 0, \\\"unknown project\\\");\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\\n      msg.sender == project.owner, \\\"not admin or project owner\\\");\\n    _;\\n  }\\n\\n  modifier whenNotReconciling() {\\n    _registry.requireNotReconciling();\\n    _;\\n  }\\n\\n  /// @dev Called once to set up the contract. Not called during proxy upgrades.\\n  ///\\n  /// @param grantImporterRole allows the contract deployer to import initial data into\\n  /// the contract using unsafeImport* functions, which is used for proxy-less upgrades.\\n  /// CAUTION: Once import is finished, the importer role should be explicitly revoked.\\n  function initialize(address[] calldata admins, ArmadaRegistry registry, bool grantImporterRole)\\n  public initializer {\\n    __Context_init();\\n    __ERC165_init();\\n    __ERC1967Upgrade_init();\\n    __AccessControl_init();\\n    __Pausable_init();\\n    __ReentrancyGuard_init();\\n    __UUPSUpgradeable_init();\\n\\n    _registry = registry;\\n    require(admins.length > 0, \\\"no admins\\\");\\n    for (uint256 i = 0; i < admins.length; ++i) {\\n      require(admins[i] != address(0), \\\"zero admin\\\");\\n      _grantRole(DEFAULT_ADMIN_ROLE, admins[i]);\\n    }\\n\\n    if (grantImporterRole) {\\n      // solhint-disable-next-line avoid-tx-origin\\n      _grantRole(IMPORTER_ROLE, tx.origin); // Only the contract deployer will have this role\\n      _setRoleAdmin(IMPORTER_ROLE, IMPORTER_ROLE); // Admin must not be able to grant this role\\n    }\\n  }\\n\\n  /// @dev Reverts if proxy upgrade of this contract by msg.sender is not allowed\\n  function _authorizeUpgrade(address) internal virtual override onlyAdmin {}\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetRegistry(ArmadaRegistry registry) public virtual onlyAdmin { _registry = registry; }\\n\\n  /// @dev Allows to import initial contract data. Used for proxy-less upgrades.\\n  /// @param creators Adding the zero address will allow anyone to create projects.\\n  /// @param revokeImporterRole stops further data import by revoking the role.\\n  /// CAUTION: Once import is finished, the role should be explicitly revoked.\\n  function unsafeImportData(ArmadaProject[] calldata projects, address[] calldata creators, bool revokeImporterRole)\\n  public onlyRole(IMPORTER_ROLE) {\\n    for (uint256 i = 0; i < projects.length; i++) {\\n      _projects[projects[i].id] = projects[i];\\n      require(_projectIds.add(projects[i].id), \\\"duplicate id\\\");\\n    }\\n    for (uint256 i = 0; i < creators.length; i++) {\\n      _grantRole(PROJECT_CREATOR_ROLE, creators[i]);\\n    }\\n    if (revokeImporterRole) {\\n      _revokeRole(IMPORTER_ROLE, msg.sender);\\n    }\\n  }\\n\\n  /// @dev Adjusts multiple projects escrows relative to their current values.\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetEscrows(uint256 skip, uint256 size, uint256 mul, uint256 div)\\n  public virtual onlyAdmin {\\n    require(mul != 0, \\\"zero mul\\\");\\n    uint256 length = _projectIds.length();\\n    uint256 n = Math.min(size, length > skip ? length - skip : 0);\\n    for (uint256 i = 0; i < n; i++) {\\n      ArmadaProject storage project = _projects[_projectIds.at(skip + i)];\\n      project.escrow = project.escrow * mul / div;\\n      project.reserve = project.reserve * mul / div;\\n    }\\n  }\\n\\n  function pause() public virtual onlyAdmin { _pause(); }\\n  function unpause() public virtual onlyAdmin { _unpause(); }\\n\\n  function getRegistry() public virtual view returns (ArmadaRegistry) { return _registry; }\\n\\n  function setProjectEscrowImpl(bytes32 projectId, uint256 decrease, uint256 increase)\\n  public virtual onlyImpl whenNotPaused {\\n    ArmadaProject storage project = _projects[projectId];\\n    require(project.id != 0, \\\"unknown project\\\");\\n    project.escrow -= decrease;\\n    project.escrow += increase;\\n  }\\n\\n  function setProjectReserveImpl(bytes32 projectId, uint256 decrease, uint256 increase)\\n  public virtual onlyImpl whenNotPaused {\\n    ArmadaProject storage project = _projects[projectId];\\n    require(project.id != 0, \\\"unknown project\\\");\\n    project.reserve -= decrease;\\n    project.reserve += increase;\\n  }\\n\\n  /// @notice Registers a new project. Requires project creator role.\\n  /// @dev Does not check name or email for validity or uniqueness\\n  function createProject(ArmadaCreateProjectData memory project)\\n  public onlyProjectCreator whenNotReconciling whenNotPaused returns (bytes32 projectId) {\\n    require(project.owner != address(0), \\\"zero owner\\\");\\n    require(bytes(project.name).length > 0, \\\"empty name\\\");\\n    require(bytes(project.name).length <= ARMADA_MAX_NAME_BYTES, \\\"name too long\\\");\\n    require(bytes(project.email).length <= ARMADA_MAX_EMAIL_BYTES, \\\"email too long\\\");\\n    require(bytes(project.content).length <= ARMADA_MAX_CONTENT_BYTES, \\\"content too long\\\");\\n    require(bytes(project.metadata).length <= ARMADA_MAX_METADATA_BYTES, \\\"metadata too long\\\");\\n    projectId = keccak256(abi.encodePacked(_registry.newNonceImpl()));\\n    _projects[projectId] = ArmadaProject({\\n      id: projectId, owner: project.owner, name: project.name, email: project.email, escrow: 0, reserve: 0,\\n      content: project.content, checksum: project.checksum, metadata: project.metadata\\n    });\\n    assert(_projectIds.add(projectId));\\n    emit ProjectCreated(projectId, project.owner, project.name, project.email, project.content, project.checksum, project.metadata);\\n  }\\n\\n  /// @notice Unregisters a project. Reverts if project has escrow or reservations.\\n  function deleteProject(bytes32 projectId)\\n  public virtual onlyProjectOwner(projectId) whenNotReconciling whenNotPaused {\\n    ArmadaProject memory projectCopy = _projects[projectId];\\n    assert(projectCopy.id != 0); // Impossible because of onlyProjectOwner\\n    ArmadaReservations reservations = _registry.getReservations();\\n    require(reservations.getReservationCount(projectId) == 0, \\\"project has reservations\\\");\\n    require(projectCopy.escrow == 0, \\\"project has escrow\\\");\\n    delete _projects[projectId];\\n    assert(_projectIds.remove(projectId));\\n    emit ProjectDeleted(projectId, projectCopy.owner, projectCopy.name, projectCopy.email, projectCopy.content, projectCopy.checksum, projectCopy.metadata);\\n  }\\n\\n  function setProjectOwner(bytes32 projectId, address owner)\\n  public virtual onlyAdminOrProjectOwner(projectId) whenNotReconciling whenNotPaused {\\n    require(owner != address(0), \\\"zero owner\\\");\\n    ArmadaProject storage project = _projects[projectId];\\n    assert(project.id != 0); // Impossible because of onlyAdminOrProjectOwner\\n    address oldOwner = project.owner;\\n    project.owner = owner;\\n    emit ProjectOwnerChanged(projectId, oldOwner, owner);\\n  }\\n\\n  /// @dev Does not check name or email for validity or uniqueness\\n  function setProjectProps(bytes32 projectId, string calldata name, string calldata email)\\n  public virtual onlyProjectOwner(projectId) whenNotReconciling whenNotPaused {\\n    require(bytes(name).length > 0, \\\"empty name\\\");\\n    require(bytes(name).length <= ARMADA_MAX_NAME_BYTES, \\\"name too long\\\");\\n    require(bytes(email).length <= ARMADA_MAX_EMAIL_BYTES, \\\"email too long\\\");\\n    ArmadaProject storage project = _projects[projectId];\\n    assert(project.id != 0); // Impossible because of onlyProjectOwner\\n    string memory oldName = project.name;\\n    string memory oldEmail = project.email;\\n    project.name = name;\\n    project.email = email;\\n    emit ProjectPropsChanged(projectId, oldName, oldEmail, name, email);\\n  }\\n\\n  /// @notice Publishes new content on the network\\n  function setProjectContent(bytes32 projectId, string calldata content, bytes32 checksum)\\n  public virtual onlyProjectOwner(projectId) whenNotReconciling whenNotPaused {\\n    require(bytes(content).length <= ARMADA_MAX_CONTENT_BYTES, \\\"content too long\\\");\\n    ArmadaProject storage project = _projects[projectId];\\n    assert(project.id != 0); // Impossible because of onlyProjectOwner\\n    string memory oldContent = project.content;\\n    bytes32 oldChecksum = project.checksum;\\n    project.content = content;\\n    project.checksum = checksum;\\n    emit ProjectContentChanged(projectId, oldContent, oldChecksum, content, checksum);\\n  }\\n\\n  /// @notice Sets project metadata\\n  function setProjectMetadata(bytes32 projectId, string calldata metadata)\\n  public virtual onlyProjectOwner(projectId) whenNotReconciling whenNotPaused {\\n    require(bytes(metadata).length <= ARMADA_MAX_METADATA_BYTES, \\\"metadata too long\\\");\\n    ArmadaProject storage project = _projects[projectId];\\n    assert(project.id != 0); // Impossible because of onlyProjectOwner\\n    string memory oldMetadata = project.metadata;\\n    project.metadata = metadata;\\n    emit ProjectMetadataChanged(projectId, oldMetadata, project.metadata);\\n  }\\n\\n  /// @notice Transfers USDC into the contract and applies them toward given operator stake.\\n  /// @dev Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).\\n  /// @dev CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer().\\n  function depositProjectEscrow(bytes32 projectId, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n  public virtual whenNotPaused {\\n    ArmadaProject storage project = _projects[projectId];\\n    require(project.id != 0, \\\"unknown project\\\");\\n    uint256 oldEscrow = project.escrow;\\n    project.escrow += amount;\\n    if (s != 0) {\\n      _registry.getUSDC().permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    } else {\\n      require(deadline == 0 && v == 0 && r == 0, \\\"invalid permit\\\");\\n    }\\n    _registry.getUSDC().transferFrom(msg.sender, address(_registry), amount);\\n    emit ProjectEscrowChanged(projectId, oldEscrow, project.escrow);\\n  }\\n\\n  /// @notice Transfers escrow from contract to given recipient. Reverts if escrow is reserved.\\n  function withdrawProjectEscrow(bytes32 projectId, uint256 amount, address to)\\n  public virtual nonReentrant onlyProjectOwner(projectId) whenNotReconciling whenNotPaused {\\n    ArmadaProject storage project = _projects[projectId];\\n    assert(project.id != 0); // Impossible because of onlyProjectOwner\\n    require(project.escrow >= project.reserve + amount, \\\"not enough escrow\\\");\\n    uint256 oldEscrow = project.escrow;\\n    project.escrow -= amount;\\n    _registry.getUSDC().transferFrom(address(_registry), to, amount);\\n    emit ProjectEscrowChanged(projectId, oldEscrow, project.escrow);\\n  }\\n\\n  /// @dev Reverts if the id is unknown\\n  function getProject(bytes32 projectId)\\n  public virtual view returns (ArmadaProject memory) {\\n    ArmadaProject memory project = _projects[projectId];\\n    require(project.id != 0, \\\"unknown project\\\");\\n    return project;\\n  }\\n\\n  function getProjectCount()\\n  public virtual view returns (uint256) {\\n    return _projectIds.length();\\n  }\\n\\n  /// @dev Truncates the results if skip or size are out of bounds\\n  function getProjects(uint256 skip, uint256 size)\\n  public virtual view returns (ArmadaProject[] memory values) {\\n    uint256 length = _projectIds.length();\\n    uint256 n = Math.min(size, length > skip ? length - skip : 0);\\n    values = new ArmadaProject[](n);\\n    for (uint256 i = 0; i < n; i++) {\\n      values[i] = _projects[_projectIds.at(skip + i)];\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x365d6e4d6373c20e2b50e3b650054625ba7aaf06d6e624e430b156f4187d41d0\",\"license\":\"UNLICENSED\"},\"contracts/ArmadaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable not-rely-on-time\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\nimport \\\"./ArmadaBilling.sol\\\";\\nimport \\\"./ArmadaNodes.sol\\\";\\nimport \\\"./ArmadaOperators.sol\\\";\\nimport \\\"./ArmadaProjects.sol\\\";\\nimport \\\"./ArmadaReservations.sol\\\";\\nimport \\\"./ArmadaToken.sol\\\";\\n\\n/// @title Main entry point for the core contracts and functionality\\ncontract ArmadaRegistry is AccessControlUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\n  // Controls who in addition to topology nodes can reconcile the network. Grant to zero address to allow everybody.\\n  bytes32 public constant RECONCILER_ROLE = keccak256(\\\"RECONCILER_ROLE\\\");\\n\\n  string private _version;          // Interpreted by the node software, used for automatic upgrading of the nodes\\n  uint256 private _nonce;           // Auto-incremented value used for generating unique ids\\n  uint256 private _lastEpochStart;  // Timestamp of the last epoch start in seconds since 1/1/1970 midnight UTC\\n  uint256 private _lastEpochLength; // Duration of the last epoch in seconds\\n  uint256 private _nextEpochLength; // Duration of the next epoch in seconds\\n  uint256 private _cuedEpochLength; // Pending change of the epoch duration, becomes effective after the next epoch\\n  uint256 private _gracePeriod;     // Period in seconds at the end of the epoch when node prices can't change\\n\\n  ERC20Permit private _usdc;\\n  ArmadaToken private _token;\\n  ArmadaBilling private _billing;\\n  ArmadaNodes private _nodes;\\n  ArmadaOperators private _operators;\\n  ArmadaProjects private _projects;\\n  ArmadaReservations private _reservations;\\n\\n  event EpochAdvanced(uint256 epochStart);\\n\\n  modifier onlyImpl {\\n    require(\\n      msg.sender == address(_nodes) ||\\n      msg.sender == address(_operators) ||\\n      msg.sender == address(_projects) ||\\n      msg.sender == address(_reservations),\\n      \\\"not impl\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdmin {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"not admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyReconcilerOrTopologyNode(bytes32 nodeIdOrZero) {\\n    if (nodeIdOrZero == 0) {\\n      require(\\n        hasRole(RECONCILER_ROLE, address(0)) ||\\n        hasRole(RECONCILER_ROLE, msg.sender),\\n        \\\"not reconciler\\\");\\n    } else {\\n      _operators.requireTopologyNode(nodeIdOrZero, msg.sender);\\n    }\\n    _;\\n  }\\n\\n  modifier whenReconciling() {\\n    requireReconciling();\\n    _;\\n  }\\n\\n  /// @dev Called once to set up the contract. Not called during proxy upgrades.\\n  function initialize(address[] calldata admins, ArmadaRegistryInitializeData calldata data)\\n  public initializer {\\n    __Context_init();\\n    __ERC165_init();\\n    __ERC1967Upgrade_init();\\n    __AccessControl_init();\\n    __Pausable_init();\\n    __ReentrancyGuard_init();\\n    __UUPSUpgradeable_init();\\n\\n    require(data.usdc != data.token, \\\"reused token\\\");\\n    require(data.epochStart <= block.timestamp, \\\"late epoch start\\\");\\n    require(data.lastEpochLength != 0, \\\"zero last epoch length\\\");\\n    require(data.nextEpochLength != 0, \\\"zero next epoch length\\\");\\n\\n    _version = data.version;\\n    _nonce = data.nonce;\\n    _lastEpochStart = data.epochStart;\\n    _lastEpochLength = data.lastEpochLength;\\n    _nextEpochLength = data.nextEpochLength;\\n    _cuedEpochLength = data.nextEpochLength;\\n    _gracePeriod = data.gracePeriod;\\n\\n    _usdc = data.usdc;\\n    _token = data.token;\\n    _billing = data.billing;\\n    _nodes = data.nodes;\\n    _operators = data.operators;\\n    _projects = data.projects;\\n    _reservations = data.reservations;\\n\\n    require(admins.length > 0, \\\"no admins\\\");\\n    for (uint256 i = 0; i < admins.length; ++i) {\\n      require(admins[i] != address(0), \\\"zero admin\\\");\\n      _grantRole(DEFAULT_ADMIN_ROLE, admins[i]);\\n    }\\n\\n    if (address(_operators) != address(0)) {\\n      _usdc.approve(address(_operators), type(uint256).max);\\n      _token.approve(address(_operators), type(uint256).max);\\n    }\\n    if (address(_projects) != address(0)) {\\n      _usdc.approve(address(_projects), type(uint256).max);\\n    }\\n  }\\n\\n  /// @dev Reverts if proxy upgrade of this contract by msg.sender is not allowed\\n  function _authorizeUpgrade(address) internal virtual override onlyAdmin {}\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetUSDC(ERC20Permit usdc) public virtual onlyAdmin {\\n    require(usdc != _token, \\\"reused token\\\");\\n    if (address(_operators) != address(0)) {\\n      _usdc.approve(address(_operators), 0);\\n      usdc.approve(address(_operators), type(uint256).max);\\n    }\\n    if (address(_projects) != address(0)) {\\n      _usdc.approve(address(_projects), 0);\\n      usdc.approve(address(_projects), type(uint256).max);\\n    }\\n    _usdc = usdc;\\n  }\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetToken(ArmadaToken token) public virtual onlyAdmin {\\n    require(token != _usdc, \\\"reused token\\\");\\n    if (address(_operators) != address(0)) {\\n      _token.approve(address(_operators), 0);\\n      token.approve(address(_operators), type(uint256).max);\\n    }\\n    _token = token;\\n  }\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetOperators(ArmadaOperators operators) public virtual onlyAdmin {\\n    if (address(_operators) != address(0)) {\\n      _usdc.approve(address(_operators), 0);\\n      _token.approve(address(_operators), 0);\\n    }\\n    if (address(operators) != address(0)) {\\n      _usdc.approve(address(operators), type(uint256).max);\\n      _token.approve(address(operators), type(uint256).max);\\n    }\\n    _operators = operators;\\n  }\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetProjects(ArmadaProjects projects) public virtual onlyAdmin {\\n    if (address(_projects) != address(0)) {\\n      _usdc.approve(address(_projects), 0);\\n    }\\n    if (address(projects) != address(0)) {\\n      _usdc.approve(address(projects), type(uint256).max);\\n    }\\n    _projects = projects;\\n  }\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetBilling(ArmadaBilling billing) public virtual onlyAdmin { _billing = billing; }\\n  function unsafeSetNodes(ArmadaNodes nodes) public virtual onlyAdmin { _nodes = nodes; }\\n  function unsafeSetReservations(ArmadaReservations reservations) public virtual onlyAdmin { _reservations = reservations; }\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  /// @dev One can unsafe-deposit funds to this contract directly by token.transfer().\\n  function unsafeWithdrawUSDC(address to, uint256 amount) public onlyAdmin { _usdc.transfer(to, amount); }\\n  function unsafeWithdrawToken(address to, uint256 amount) public onlyAdmin { _token.transfer(to, amount); }\\n\\n  function pause() public virtual onlyAdmin { _pause(); }\\n  function unpause() public virtual onlyAdmin { _unpause(); }\\n\\n  function getVersion() public virtual view returns (string memory) { return _version; }\\n  function setVersion(string calldata version) public virtual onlyAdmin { _version = version; }\\n\\n  function getNonce() public virtual view returns (uint256) { return _nonce; }\\n  function newNonceImpl() public virtual onlyImpl returns (uint256) { return _nonce++; }\\n\\n  function getUSDC() public virtual view returns (ERC20Permit) { return _usdc; }\\n  function getToken() public virtual view returns (ArmadaToken) { return _token; }\\n  function getBilling() public virtual view returns (ArmadaBilling) { return _billing; }\\n  function getNodes() public virtual view returns (ArmadaNodes) { return _nodes; }\\n  function getOperators() public virtual view returns (ArmadaOperators) { return _operators; }\\n  function getProjects() public virtual view returns (ArmadaProjects) { return _projects; }\\n  function getReservations() public virtual view returns (ArmadaReservations) { return _reservations; }\\n\\n  function getLastEpochStart() public virtual view returns (uint256) { return _lastEpochStart; }\\n  function unsafeSetLastEpochStart(uint256 start) public virtual onlyAdmin { _lastEpochStart = start; } // Used by tests\\n  function getLastEpochLength() public virtual view returns (uint256) { return _lastEpochLength; }\\n  function getNextEpochLength() public virtual view returns (uint256) { return _nextEpochLength; }\\n  function getCuedEpochLength() public virtual view returns (uint256) { return _cuedEpochLength; }\\n  function setCuedEpochLength(uint256 length) public virtual onlyAdmin { _cuedEpochLength = length; }\\n\\n  /// @return Number of seconds left in the current epoch\\n  function getEpochRemainder() public virtual view returns (uint256) {\\n    uint256 epochEnd = _lastEpochStart + _lastEpochLength;\\n    return epochEnd > block.timestamp ? epochEnd - block.timestamp : 0;\\n  }\\n\\n  function getGracePeriod() public virtual view returns (uint256) { return _gracePeriod; }\\n  function setGracePeriod(uint256 period) public virtual onlyAdmin { _gracePeriod = period; }\\n\\n  function requireReconciling() public virtual {\\n    require(block.timestamp >= _lastEpochStart + _lastEpochLength, \\\"not reconciling\\\");\\n  }\\n\\n  function requireNotReconciling() public virtual {\\n    require(block.timestamp < _lastEpochStart + _lastEpochLength, \\\"reconciling\\\");\\n  }\\n\\n  function requireNotGracePeriod() public virtual {\\n    require(block.timestamp + _gracePeriod < _lastEpochStart + _lastEpochLength, \\\"grace period\\\");\\n  }\\n\\n  /// @notice Called by the leader topology node to finish epoch reconciliation and unfreeze the network state.\\n  /// @param topologyNodeId The topology node calling this function (zero is OK if caller has reconciler role)\\n  ///\\n  /// The core contracts automatically enter reconciliation mode when the last epoch ends. During reconciliation,\\n  /// the operations that change contract state, such as node pricing or reservations, are disallowed and will revert.\\n  /// The leader topology node is expected to call processBilling(), processRenewal(), and advanceEpoch() in this\\n  /// order, to execute reconcilication. Calling advanceEpoch() completes reconciliation and unfreezes the contracts.\\n  /// The reconciliation process should normally only take a few blocks.\\n  function advanceEpoch(bytes32 topologyNodeId)\\n  public virtual onlyReconcilerOrTopologyNode(topologyNodeId) whenReconciling whenNotPaused {\\n    uint256 nodeCount = _nodes.getNodeCount(0, false);\\n    require(_billing.getBillingNodeIndex() == nodeCount, \\\"billing in progress\\\");\\n    require(_billing.getRenewalNodeIndex() == nodeCount, \\\"renewal in progress\\\");\\n    _billing.setBillingNodeIndexImpl(0);\\n    _billing.setRenewalNodeIndexImpl(0);\\n    _lastEpochStart += _lastEpochLength;\\n    _lastEpochLength = _nextEpochLength;\\n    _nextEpochLength = _cuedEpochLength;\\n    emit EpochAdvanced(_lastEpochStart);\\n  }\\n}\\n\",\"keccak256\":\"0x1fb339609533fa765a7fb2a80e12b1d121acf9b55ed68b2cd6b1eeb7aee09fbd\",\"license\":\"UNLICENSED\"},\"contracts/ArmadaReservations.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./ArmadaNodes.sol\\\";\\nimport \\\"./ArmadaProjects.sol\\\";\\nimport \\\"./ArmadaRegistry.sol\\\";\\nimport \\\"./ArmadaTypes.sol\\\";\\n\\n/// @title Entry point for managing node reservations by projects\\ncontract ArmadaReservations is AccessControlUpgradeable, PausableUpgradeable, UUPSUpgradeable {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  // Controls who can do data import during contract initialization\\n  bytes32 public constant IMPORTER_ROLE = keccak256(\\\"IMPORTER_ROLE\\\");\\n\\n  ArmadaRegistry private _registry;\\n\\n  mapping(bytes32 => EnumerableSet.Bytes32Set) private _projectNodeIds; // Union of last and next epoch\\n\\n  event ReservationCreated(bytes32 indexed nodeId, bytes32 indexed operatorId, bytes32 indexed projectId,\\n    uint256 lastPrice, uint256 nextPrice, ArmadaSlot slot);\\n  event ReservationDeleted(bytes32 indexed nodeId, bytes32 indexed operatorId, bytes32 indexed projectId,\\n    uint256 lastPrice, uint256 nextPrice, ArmadaSlot slot);\\n\\n  modifier onlyImpl {\\n    require(\\n      msg.sender == address(_registry) ||\\n      msg.sender == address(_registry.getBilling()) ||\\n      msg.sender == address(_registry.getNodes()) ||\\n      msg.sender == address(_registry.getOperators()) ||\\n      msg.sender == address(_registry.getProjects()),\\n      \\\"not impl\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdmin {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"not admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyProjectOwner(bytes32 projectId) {\\n    ArmadaProjects projects = _registry.getProjects();\\n    ArmadaProject memory project = projects.getProject(projectId);\\n    require(msg.sender == project.owner, \\\"not project owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdminOrProjectOwner(bytes32 projectId) {\\n    ArmadaProjects projects = _registry.getProjects();\\n    ArmadaProject memory project = projects.getProject(projectId);\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\\n      msg.sender == project.owner, \\\"not admin or project owner\\\");\\n    _;\\n  }\\n\\n  modifier whenNotReconciling() {\\n    _registry.requireNotReconciling();\\n    _;\\n  }\\n\\n  /// @dev Called once to set up the contract. Not called during proxy upgrades.\\n  ///\\n  /// @param grantImporterRole allows the contract deployer to import initial data into\\n  /// the contract using unsafeImport* functions, which is used for proxy-less upgrades.\\n  /// CAUTION: Once import is finished, the importer role should be explicitly revoked.\\n  function initialize(address[] calldata admins, ArmadaRegistry registry, bool grantImporterRole)\\n  public initializer {\\n    __Context_init();\\n    __ERC165_init();\\n    __ERC1967Upgrade_init();\\n    __AccessControl_init();\\n    __Pausable_init();\\n    __UUPSUpgradeable_init();\\n\\n    _registry = registry;\\n    require(admins.length > 0, \\\"no admins\\\");\\n    for (uint256 i = 0; i < admins.length; ++i) {\\n      require(admins[i] != address(0), \\\"zero admin\\\");\\n      _grantRole(DEFAULT_ADMIN_ROLE, admins[i]);\\n    }\\n\\n    if (grantImporterRole) {\\n      // solhint-disable-next-line avoid-tx-origin\\n      _grantRole(IMPORTER_ROLE, tx.origin); // Only the contract deployer will have this role\\n      _setRoleAdmin(IMPORTER_ROLE, IMPORTER_ROLE); // Admin must not be able to grant this role\\n    }\\n  }\\n\\n  /// @dev Reverts if proxy upgrade of this contract by msg.sender is not allowed\\n  function _authorizeUpgrade(address) internal virtual override onlyAdmin {}\\n\\n  /// @dev CAUTION: This can break data consistency. Used for proxy-less upgrades.\\n  function unsafeSetRegistry(ArmadaRegistry registry) public virtual onlyAdmin { _registry = registry; }\\n\\n  /// @dev Allows to import initial contract data. Used for proxy-less upgrades.\\n  /// @param revokeImporterRole stops further data import by revoking the role.\\n  /// CAUTION: Once import is finished, the role should be explicitly revoked.\\n  function unsafeImportData(ArmadaNode[] calldata nodes, bool revokeImporterRole)\\n  public onlyRole(IMPORTER_ROLE) {\\n    for (uint256 i = 0; i < nodes.length; i++) {\\n      bytes32 nodeId = nodes[i].id;\\n      if (nodes[i].projectIds[0] != 0)\\n        _projectNodeIds[nodes[i].projectIds[0]].add(nodeId);\\n      if (nodes[i].projectIds[1] != 0)\\n        _projectNodeIds[nodes[i].projectIds[1]].add(nodeId);\\n    }\\n    if (revokeImporterRole) {\\n      _revokeRole(IMPORTER_ROLE, msg.sender);\\n    }\\n  }\\n\\n  function pause() public virtual onlyAdmin { _pause(); }\\n  function unpause() public virtual onlyAdmin { _unpause(); }\\n\\n  function getRegistry() public virtual view returns (ArmadaRegistry) { return _registry; }\\n\\n  function removeProjectNodeIdImpl(bytes32 projectId, bytes32 nodeId)\\n  public virtual onlyImpl whenNotPaused returns (bool) {\\n    return _projectNodeIds[projectId].remove(nodeId);\\n  }\\n\\n  /// @notice Reserves content nodes and locks corresponding escrow amount. Reverts if escrow is insufficient.\\n  /// @param maxPrices At what max price to reserve. A safety mechanism in case price changes during this call.\\n  ///\\n  /// Use slot.last to reserve immediately in the current epoch (AKA spot), instead of at the start of next epoch.\\n  /// In this case, the node prices will be prorated, but the project won't be able to immediately release these\\n  /// nodes until next epoch. Use slot.next to auto-renew reservation in the next epoch (required if !slot.last).\\n  function createReservations(\\n    bytes32 projectId, bytes32[] memory nodeIds, uint256[] memory maxPrices, ArmadaSlot calldata slot)\\n  public virtual onlyProjectOwner(projectId) whenNotReconciling whenNotPaused {\\n    require(slot.last || slot.next, \\\"no slot\\\");\\n    require(nodeIds.length == maxPrices.length, \\\"length mismatch\\\");\\n    ArmadaNodes allNodes = _registry.getNodes();\\n    ArmadaProjects projects = _registry.getProjects();\\n    uint256 epochRemainder = _registry.getEpochRemainder();\\n    for (uint256 i = 0; i < nodeIds.length; i++) {\\n      ArmadaNode memory nodeCopy = allNodes.getNode(nodeIds[i]);\\n      createReservationImpl(allNodes, projects, projectId, nodeCopy, epochRemainder, maxPrices[i], slot);\\n    }\\n    ArmadaProject memory projectCopy = projects.getProject(projectId);\\n    require(projectCopy.escrow >= projectCopy.reserve, \\\"not enough escrow\\\");\\n  }\\n\\n  function createReservationImpl(\\n    ArmadaNodes allNodes, ArmadaProjects projects, bytes32 projectId, ArmadaNode memory nodeCopy,\\n    uint256 epochRemainder, uint256 maxPrice, ArmadaSlot calldata slot)\\n  internal virtual {\\n    require(!nodeCopy.topology, \\\"topology node\\\");\\n    require(!nodeCopy.disabled, \\\"node disabled\\\");\\n    uint256 lastPrice = 0;\\n    uint256 nextPrice = 0;\\n    if (slot.last) {\\n      require(nodeCopy.projectIds[ARMADA_LAST_EPOCH] == 0, \\\"node reserved\\\");\\n      lastPrice = nodeCopy.prices[ARMADA_LAST_EPOCH];\\n      require(lastPrice <= maxPrice, \\\"price mismatch\\\");\\n      uint256 proratedPrice = lastPrice * epochRemainder / _registry.getLastEpochLength(); \\n      allNodes.setNodeProjectImpl(nodeCopy.id, ARMADA_LAST_EPOCH, projectId);\\n      allNodes.setNodePriceImpl(nodeCopy.id, ARMADA_LAST_EPOCH, proratedPrice);\\n      projects.setProjectReserveImpl(projectId, 0, proratedPrice);\\n    }\\n    if (slot.next) {\\n      require(nodeCopy.projectIds[ARMADA_NEXT_EPOCH] == 0, \\\"node reserved\\\");\\n      nextPrice = nodeCopy.prices[ARMADA_NEXT_EPOCH];\\n      require(nextPrice <= maxPrice, \\\"price mismatch\\\");\\n      allNodes.setNodeProjectImpl(nodeCopy.id, ARMADA_NEXT_EPOCH, projectId);\\n      projects.setProjectReserveImpl(projectId, 0, nextPrice);\\n    }\\n    _projectNodeIds[projectId].add(nodeCopy.id);\\n    emit ReservationCreated(nodeCopy.id, nodeCopy.operatorId, projectId, lastPrice, nextPrice, slot);\\n  }\\n\\n  /// @notice Releases content nodes starting from next epoch and unlocks project escrow\\n  ///\\n  /// Project owner can use slot.next to schedule reservation to be deleted in the next epoch.\\n  /// Admin can additionally use slot.last to immediately delete reservation in the current epoch.\\n  /// The latter is an emergency mechanism. As a side effect, the project won't be billed for the\\n  /// node usage in the epoch so far, and the operator won't be credited for providing this node.\\n  /// Moreover, the current epoch price of the released node will be set to its next epoch price,\\n  /// so if there was a price change scheduled by the operator, it will be accelerated to happen\\n  /// in this epoch.\\n  function deleteReservations(bytes32 projectId, bytes32[] memory nodeIds, ArmadaSlot calldata slot)\\n  public virtual onlyAdminOrProjectOwner(projectId) whenNotReconciling whenNotPaused {\\n    require(slot.last || slot.next, \\\"no slot\\\");\\n    require(!slot.last || hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"not admin\\\");\\n    ArmadaNodes allNodes = _registry.getNodes();\\n    ArmadaProjects projects = _registry.getProjects();\\n    for (uint256 i = 0; i < nodeIds.length; i++) {\\n      bytes32 nodeId = nodeIds[i];\\n      ArmadaNode memory nodeCopy = allNodes.getNode(nodeId);\\n      deleteReservationImpl(allNodes, projects, projectId, nodeCopy, slot);\\n    }\\n  }\\n\\n  function deleteReservationImpl(\\n    ArmadaNodes allNodes, ArmadaProjects projects, bytes32 projectId, bytes32 nodeId, ArmadaSlot calldata slot)\\n  public virtual onlyImpl whenNotPaused {\\n    ArmadaNode memory nodeCopy = allNodes.getNode(nodeId);\\n    deleteReservationImpl(allNodes, projects, projectId, nodeCopy, slot);\\n  }\\n\\n  function deleteReservationImpl(\\n    ArmadaNodes allNodes, ArmadaProjects projects, bytes32 projectId, ArmadaNode memory nodeCopy,\\n    ArmadaSlot calldata slot)\\n  internal virtual {\\n    uint256 lastPrice = 0;\\n    uint256 nextPrice = 0;\\n    if (slot.last) {\\n      lastPrice = nodeCopy.prices[ARMADA_LAST_EPOCH];\\n      nextPrice = nodeCopy.prices[ARMADA_NEXT_EPOCH];\\n      require(nodeCopy.projectIds[ARMADA_LAST_EPOCH] == projectId, \\\"node not reserved\\\");\\n      allNodes.setNodePriceImpl(nodeCopy.id, ARMADA_LAST_EPOCH, nextPrice);\\n      allNodes.setNodeProjectImpl(nodeCopy.id, ARMADA_LAST_EPOCH, 0);\\n      projects.setProjectReserveImpl(projectId, lastPrice, 0);\\n      if (nodeCopy.projectIds[ARMADA_NEXT_EPOCH] != projectId) {\\n        assert(_projectNodeIds[projectId].remove(nodeCopy.id));\\n      }\\n    }\\n    if (slot.next) {\\n      nextPrice = nodeCopy.prices[ARMADA_NEXT_EPOCH];\\n      require(nodeCopy.projectIds[ARMADA_NEXT_EPOCH] == projectId, \\\"node not reserved\\\");\\n      allNodes.setNodeProjectImpl(nodeCopy.id, ARMADA_NEXT_EPOCH, 0);\\n      projects.setProjectReserveImpl(projectId, nextPrice, 0);\\n      if (nodeCopy.projectIds[ARMADA_LAST_EPOCH] != projectId) {\\n        assert(_projectNodeIds[projectId].remove(nodeCopy.id));\\n      }\\n    }\\n    if (slot.last && slot.next) {\\n      assert(_projectNodeIds[projectId].remove(nodeCopy.id));\\n    }\\n    emit ReservationDeleted(nodeCopy.id, nodeCopy.operatorId, projectId, lastPrice, nextPrice, slot);\\n  }\\n\\n  function getReservationCount(bytes32 projectId)\\n  public virtual view returns (uint256) {\\n    return _projectNodeIds[projectId].length();\\n  }\\n\\n  /// @dev Truncates the results if skip or size are out of bounds\\n  function getReservations(bytes32 projectId, uint256 skip, uint256 size)\\n  public virtual view returns (ArmadaNode[] memory result) {\\n    ArmadaNodes allNodes = _registry.getNodes();\\n    EnumerableSet.Bytes32Set storage nodeIds = _projectNodeIds[projectId];\\n    uint256 length = nodeIds.length();\\n    uint256 n = Math.min(size, length > skip ? length - skip : 0);\\n    result = new ArmadaNode[](n);\\n    for (uint256 i = 0; i < n; i++) {\\n      result[i] = allNodes.getNode(nodeIds.at(skip + i));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf02978522eb3ec7d738dab1d5bc4ab9c281cb168cf73b3c49d2da10f33e3b43b\",\"license\":\"UNLICENSED\"},\"contracts/ArmadaToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\n\\ncontract ArmadaToken is ERC20Votes, AccessControl, Pausable {\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    address[] memory admins,\\n    address[] memory minters,\\n    address[] memory pausers\\n  ) ERC20(name, symbol) ERC20Permit(name) {\\n    require(admins.length > 0, \\\"no admins\\\");\\n    for (uint256 i = 0; i < admins.length; ++i) {\\n      require(admins[i] != address(0), \\\"zero admin\\\");\\n      _grantRole(DEFAULT_ADMIN_ROLE, admins[i]);\\n    }\\n    for (uint256 i = 0; i < minters.length; ++i) {\\n      require(minters[i] != address(0), \\\"zero minter\\\");\\n      _grantRole(MINTER_ROLE, minters[i]);\\n    }\\n    for (uint256 i = 0; i < pausers.length; ++i) {\\n      require(pausers[i] != address(0), \\\"zero pauser\\\");\\n      _grantRole(PAUSER_ROLE, pausers[i]);\\n    }\\n  }\\n\\n  function pause() public onlyRole(PAUSER_ROLE) { _pause(); }\\n  function unpause() public onlyRole(PAUSER_ROLE) { _unpause(); }\\n\\n  function _beforeTokenTransfer(address from, address to, uint256 amount)\\n  internal override whenNotPaused {\\n    super._beforeTokenTransfer(from, to, amount);\\n  }\\n\\n  function mint(address to, uint256 amount)\\n  public onlyRole(MINTER_ROLE) {\\n    _mint(to, amount);\\n  }\\n\\n  function burn(uint256 amount) public {\\n    _burn(msg.sender, amount);\\n  }\\n\\n  function burnFrom(address from, uint256 amount) public {\\n    _spendAllowance(from, msg.sender, amount);\\n    _burn(from, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x972a97739eb5f8e3bb774c4026ce16391e2c50fcc0fbc6e1df0e6f163020ecf0\",\"license\":\"UNLICENSED\"},\"contracts/ArmadaTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\nimport \\\"./ArmadaBilling.sol\\\";\\nimport \\\"./ArmadaNodes.sol\\\";\\nimport \\\"./ArmadaOperators.sol\\\";\\nimport \\\"./ArmadaProjects.sol\\\";\\nimport \\\"./ArmadaReservations.sol\\\";\\nimport \\\"./ArmadaToken.sol\\\";\\n\\nuint256 constant ARMADA_MAX_FQDN_BYTES = 256;\\nuint256 constant ARMADA_MAX_HOST_BYTES = 256;\\nuint256 constant ARMADA_MAX_REGION_BYTES = 2;\\nuint256 constant ARMADA_MAX_NAME_BYTES = 256;\\nuint256 constant ARMADA_MAX_EMAIL_BYTES = 256;\\nuint256 constant ARMADA_MAX_CONTENT_BYTES = 2048;\\nuint256 constant ARMADA_MAX_METADATA_BYTES = 2048;\\n\\n// Indexes of epoch slots\\nuint256 constant ARMADA_LAST_EPOCH = 0;\\nuint256 constant ARMADA_NEXT_EPOCH = 1;\\n\\n// Specifies an epoch slot\\nstruct ArmadaSlot {\\n  bool last; // Starting and ending with the current epoch\\n  bool next; // Starting from next epoch and going forward\\n}\\n\\n// On-chain operator entity\\nstruct ArmadaOperator {\\n  bytes32 id;      // Hash of nonce\\n  address owner;   // Who can change operator settings or withdraw stake\\n  string name;     // A human-friendly name for the operator\\n  string email;    // Used for administrative notifications\\n  uint256 stake;   // Token amount staked by the operator, determines how many nodes this operator can create\\n  uint256 balance; // USDC amount received through payments from projects\\n}\\n\\n// On-chain project entity\\nstruct ArmadaProject {\\n  bytes32 id;       // Hash of nonce\\n  address owner;    // Who can change project settings, publish content or withdraw escrow, e.g governance DAO\\n  string name;      // A human-friendly name for the project\\n  string email;     // Used for administrative notifications\\n  uint256 escrow;   // USDC amount deposited by the project, used to reserve and pay for content nodes\\n  uint256 reserve;  // Part of escrow that is locked to fulfill payment obligations for the last and next epoch\\n  string content;   // What to serve by content nodes as interpreted by the node software, e.g. tarball URL\\n  bytes32 checksum; // Checksum of the content field above as interpreted by the node software, e.g. SHA-256\\n  string metadata;  // Serialized JSON metadata string for future additions or annotations\\n}\\n\\nstruct ArmadaCreateProjectData {\\n  address owner;\\n  string name;\\n  string email;\\n  string content;\\n  bytes32 checksum;\\n  string metadata;\\n}\\n\\n// On-chain node entity\\nstruct ArmadaNode {\\n  bytes32 id;         // Hash of nonce\\n  bytes32 operatorId; // Who can change node settings, pricing, disable or delete this node\\n  string host;        // Interpreted by the node software\\n  string region;      // Interpreted by the node software\\n  bool topology;      // Whether this is a topology or content node\\n  bool disabled;      // Disabled node won't take new reservations, and won't renew when current epoch ends\\n\\n  // Content nodes only. Slots that hold corresponding values for the last and the next epoch.\\n  uint256[2] prices;     // Full-epoch price in USDC if node is not reserved, or prorated price if node is reserved\\n  bytes32[2] projectIds; // Project that reserved this node for the respective epoch, or zero if not reserved\\n}\\n\\nstruct ArmadaCreateNodeData {\\n  string host;\\n  string region;\\n  bool topology;\\n  bool disabled;\\n\\n  // Content nodes only\\n  uint256 price; // USDC amount to reserve this node for one epoch\\n}\\n\\nstruct ArmadaRegistryInitializeData {\\n  string version;\\n  uint256 nonce;\\n  uint256 epochStart;\\n  uint256 lastEpochLength;\\n  uint256 nextEpochLength;\\n  uint256 gracePeriod;\\n\\n  ERC20Permit usdc;\\n  ArmadaToken token;\\n  ArmadaBilling billing;\\n  ArmadaNodes nodes;\\n  ArmadaOperators operators;\\n  ArmadaProjects projects;\\n  ArmadaReservations reservations;\\n}\\n\",\"keccak256\":\"0x2c45f49b5d2ad0d84366dcd96be3a6fcd90feaf197753829168dad687119665e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c806367a890991161010d57806391d14854116100a0578063d0a189581161006f578063d0a1895814610583578063d547741f146105a3578063da481dd6146105c3578063e6416b21146105e3578063f1bd1b8a1461060357600080fd5b806391d1485414610501578063a217fddf14610521578063a84ce2b514610536578063b9a2adf01461056357600080fd5b80637aee1c6b116100dc5780637aee1c6b1461048c57806383945d4b146104ac5780638456cb59146104cc578063862514b3146104e157600080fd5b806367a890991461040a5780636f091dbf1461042a5780636fa2a0671461044a578063755dc5971461046c57600080fd5b80633f4ba83a116101855780634f1ef286116101545780634f1ef286146103a157806352d1902d146103b45780635ab1bd53146103c95780635c975abb146103f257600080fd5b80633f4ba83a1461031f578063491a8bbd146103345780634b5f748a146103545780634db873621461038157600080fd5b80632f2ff15d116101c15780632f2ff15d146102aa57806336568abe146102ca5780633659cfe6146102ea5780633bcff3b01461030a57600080fd5b806301ffc9a7146101f357806312565dd01461022857806323c1a61c1461024a578063248a9ca31461027a575b600080fd5b3480156101ff57600080fd5b5061021361020e3660046143ea565b610623565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b50610248610243366004614434565b61065a565b005b34801561025657600080fd5b5061026c60008051602061544383398151915281565b60405190815260200161021f565b34801561028657600080fd5b5061026c61029536600461446d565b60009081526065602052604090206001015490565b3480156102b657600080fd5b506102486102c5366004614486565b610995565b3480156102d657600080fd5b506102486102e5366004614486565b6109bf565b3480156102f657600080fd5b506102486103053660046144b6565b610a3d565b34801561031657600080fd5b5061026c610b1d565b34801561032b57600080fd5b50610248610b2f565b34801561034057600080fd5b5061024861034f3660046144d3565b610b60565b34801561036057600080fd5b5061037461036f36600461446d565b610e9d565b60405161021f9190614636565b34801561038d57600080fd5b5061026c61039c36600461471c565b611165565b6102486103af36600461480f565b611669565b3480156103c057600080fd5b5061026c611736565b3480156103d557600080fd5b5061015f546040516001600160a01b03909116815260200161021f565b3480156103fe57600080fd5b5060975460ff16610213565b34801561041657600080fd5b506102486104253660046148ba565b6117e9565b34801561043657600080fd5b5061024861044536600461495e565b611a34565b34801561045657600080fd5b5061026c60008051602061542383398151915281565b34801561047857600080fd5b506102486104873660046149e1565b611bc3565b34801561049857600080fd5b506102486104a7366004614a2c565b611dfd565b3480156104b857600080fd5b506102486104c7366004614a93565b611fd1565b3480156104d857600080fd5b50610248612313565b3480156104ed57600080fd5b506102486104fc366004614abf565b612342565b34801561050d57600080fd5b5061021361051c366004614486565b61269d565b34801561052d57600080fd5b5061026c600081565b34801561054257600080fd5b50610556610551366004614b38565b6126c8565b60405161021f9190614b5a565b34801561056f57600080fd5b5061024861057e3660046144b6565b612a50565b34801561058f57600080fd5b5061024861059e36600461446d565b612a9a565b3480156105af57600080fd5b506102486105be366004614486565b6130c2565b3480156105cf57600080fd5b506102486105de366004614a93565b6130e7565b3480156105ef57600080fd5b506102486105fe366004614486565b61341e565b34801561060f57600080fd5b5061024861061e366004614bbc565b613608565b60006001600160e01b03198216637965db0b60e01b148061065457506301ffc9a760e01b6001600160e01b03198316145b92915050565b600260c95414156106b25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260c95560008381526101606020526040902080548491906106e75760405162461bcd60e51b81526004016106a990614bee565b60018101546001600160a01b031633146107135760405162461bcd60e51b81526004016106a990614c17565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663bb1f47406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561076457600080fd5b505af1158015610778573d6000803e3d6000fd5b5050505061078860975460ff1690565b156107a55760405162461bcd60e51b81526004016106a990614c42565b60008581526101606020526040902080546107c2576107c2614c6c565b8481600501546107d29190614c98565b816004015410156108195760405162461bcd60e51b81526020600482015260116024820152706e6f7420656e6f75676820657363726f7760781b60448201526064016106a9565b600481018054908690600061082e8385614cb0565b909155505061015f5460408051631bf01e9b60e01b815290516001600160a01b0390921691631bf01e9b91600480820192602092909190829003018186803b15801561087957600080fd5b505afa15801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190614cc7565b61015f546040516323b872dd60e01b81526001600160a01b0391821660048201528782166024820152604481018990529116906323b872dd90606401602060405180830381600087803b15801561090757600080fd5b505af115801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f9190614ce4565b50867f2a5f5e56e89c57ee03d89ec4718d7ae9911b09486c8ac692e4908ef267eb280482846004015460405161097f929190918252602082015260400190565b60405180910390a25050600160c9555050505050565b6000828152606560205260409020600101546109b081613721565b6109ba838361372b565b505050565b6001600160a01b0381163314610a2f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106a9565b610a3982826137b1565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a865760405162461bcd60e51b81526004016106a990614d01565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610acf6000805160206153dc833981519152546001600160a01b031690565b6001600160a01b031614610af55760405162461bcd60e51b81526004016106a990614d4d565b610afe81613818565b60408051600080825260208201909252610b1a9183919061383f565b50565b6000610b2a6101616139b9565b905090565b610b3a60003361269d565b610b565760405162461bcd60e51b81526004016106a990614d99565b610b5e6139c3565b565b60975460ff1615610b835760405162461bcd60e51b81526004016106a990614c42565b6000868152610160602052604090208054610bb05760405162461bcd60e51b81526004016106a990614bee565b6004810180549087906000610bc58385614c98565b90915550508215610ce25761015f60009054906101000a90046001600160a01b03166001600160a01b0316631bf01e9b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190614cc7565b60405163d505accf60e01b8152336004820152306024820152604481018990526064810188905260ff8716608482015260a4810186905260c481018590526001600160a01b03919091169063d505accf9060e401600060405180830381600087803b158015610cc557600080fd5b505af1158015610cd9573d6000803e3d6000fd5b50505050610d38565b85158015610cf1575060ff8516155b8015610cfb575083155b610d385760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081c195c9b5a5d60921b60448201526064016106a9565b61015f60009054906101000a90046001600160a01b03166001600160a01b0316631bf01e9b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf9190614cc7565b61015f546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018a90529116906323b872dd90606401602060405180830381600087803b158015610e1357600080fd5b505af1158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190614ce4565b50877f2a5f5e56e89c57ee03d89ec4718d7ae9911b09486c8ac692e4908ef267eb2804828460040154604051610e8b929190918252602082015260400190565b60405180910390a25050505050505050565b610ea561424c565b6000828152610160602090815260408083208151610120810183528154815260018201546001600160a01b0316938101939093526002810180549192840191610eed90614dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1990614dbc565b8015610f665780601f10610f3b57610100808354040283529160200191610f66565b820191906000526020600020905b815481529060010190602001808311610f4957829003601f168201915b50505050508152602001600382018054610f7f90614dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054610fab90614dbc565b8015610ff85780601f10610fcd57610100808354040283529160200191610ff8565b820191906000526020600020905b815481529060010190602001808311610fdb57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201805461102590614dbc565b80601f016020809104026020016040519081016040528092919081815260200182805461105190614dbc565b801561109e5780601f106110735761010080835404028352916020019161109e565b820191906000526020600020905b81548152906001019060200180831161108157829003601f168201915b50505050508152602001600782015481526020016008820180546110c190614dbc565b80601f01602080910402602001604051908101604052809291908181526020018280546110ed90614dbc565b801561113a5780601f1061110f5761010080835404028352916020019161113a565b820191906000526020600020905b81548152906001019060200180831161111d57829003601f168201915b5050509190925250508151919250506106545760405162461bcd60e51b81526004016106a990614bee565b6000611180600080516020615443833981519152600061269d565b8061119e575061119e6000805160206154438339815191523361269d565b6111e05760405162461bcd60e51b81526020600482015260136024820152723737ba10383937b532b1ba1031b932b0ba37b960691b60448201526064016106a9565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663bb1f47406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561123157600080fd5b505af1158015611245573d6000803e3d6000fd5b5050505061125560975460ff1690565b156112725760405162461bcd60e51b81526004016106a990614c42565b81516001600160a01b03166112b65760405162461bcd60e51b815260206004820152600a6024820152693d32b9379037bbb732b960b11b60448201526064016106a9565b6000826020015151116112f85760405162461bcd60e51b815260206004820152600a602482015269656d707479206e616d6560b01b60448201526064016106a9565b610100826020015151111561133f5760405162461bcd60e51b815260206004820152600d60248201526c6e616d6520746f6f206c6f6e6760981b60448201526064016106a9565b61010082604001515111156113875760405162461bcd60e51b815260206004820152600e60248201526d656d61696c20746f6f206c6f6e6760901b60448201526064016106a9565b61080082606001515111156113d15760405162461bcd60e51b815260206004820152601060248201526f636f6e74656e7420746f6f206c6f6e6760801b60448201526064016106a9565b6108008260a0015151111561141c5760405162461bcd60e51b81526020600482015260116024820152706d6574616461746120746f6f206c6f6e6760781b60448201526064016106a9565b61015f60009054906101000a90046001600160a01b03166001600160a01b03166379a6a3a56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a59190614df7565b6040516020016114b791815260200190565b60408051808303601f1901815282825280516020918201206101208401835280845285516001600160a01b03908116838601908152878401518686019081528886015160608089019190915260006080808a0182905260a0808b01839052928c015160c08b01528b015160e08a0152908a01516101008901528481526101608652959095208651815590516001820180546001600160a01b0319169190931617909155925180519195506115729260028501929101906142a7565b506060820151805161158e9160038401916020909101906142a7565b506080820151600482015560a0820151600582015560c082015180516115be9160068401916020909101906142a7565b5060e0820151600782015561010082015180516115e59160088401916020909101906142a7565b506115f69150610161905082613a56565b61160257611602614c6c565b81600001516001600160a01b0316817fc9a2563ef6e863a3e90b633d77bef27cc637d965cadcc8e629740f13d6c5b83e84602001518560400151866060015187608001518860a0015160405161165c959493929190614e10565b60405180910390a3919050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156116b25760405162461bcd60e51b81526004016106a990614d01565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116fb6000805160206153dc833981519152546001600160a01b031690565b6001600160a01b0316146117215760405162461bcd60e51b81526004016106a990614d4d565b61172a82613818565b610a398282600161383f565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117d65760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106a9565b506000805160206153dc83398151915290565b60008481526101606020526040902080548591906118195760405162461bcd60e51b81526004016106a990614bee565b60018101546001600160a01b031633146118455760405162461bcd60e51b81526004016106a990614c17565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663bb1f47406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561189657600080fd5b505af11580156118aa573d6000803e3d6000fd5b505050506118ba60975460ff1690565b156118d75760405162461bcd60e51b81526004016106a990614c42565b61080084111561191c5760405162461bcd60e51b815260206004820152601060248201526f636f6e74656e7420746f6f206c6f6e6760801b60448201526064016106a9565b600086815261016060205260409020805461193957611939614c6c565b600081600601805461194a90614dbc565b80601f016020809104026020016040519081016040528092919081815260200182805461197690614dbc565b80156119c35780601f10611998576101008083540402835291602001916119c3565b820191906000526020600020905b8154815290600101906020018083116119a657829003601f168201915b50505060078501549293506119df91505060068401898961432b565b50858360070181905550887f34fd38e6eebd32ffe18208627966f06ce8f8756fa72a8d8dd2ab1750c0f11e2383838b8b8b604051611a21959493929190614e98565b60405180910390a2505050505050505050565b600080516020615423833981519152611a4c81613721565b60005b85811015611b4057868682818110611a6957611a69614ed7565b9050602002810190611a7b9190614eed565b6101606000898985818110611a9257611a92614ed7565b9050602002810190611aa49190614eed565b3581526020810191909152604001600020611abf8282615066565b905050611af3878783818110611ad757611ad7614ed7565b9050602002810190611ae99190614eed565b6101619035613a56565b611b2e5760405162461bcd60e51b815260206004820152600c60248201526b191d5c1b1a58d85d19481a5960a21b60448201526064016106a9565b80611b388161512e565b915050611a4f565b5060005b83811015611b9c57611b8a600080516020615443833981519152868684818110611b7057611b70614ed7565b9050602002016020810190611b8591906144b6565b61372b565b80611b948161512e565b915050611b44565b508115611bbb57611bbb600080516020615423833981519152336137b1565b505050505050565b6000838152610160602052604090208054849190611bf35760405162461bcd60e51b81526004016106a990614bee565b60018101546001600160a01b03163314611c1f5760405162461bcd60e51b81526004016106a990614c17565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663bb1f47406040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611c7057600080fd5b505af1158015611c84573d6000803e3d6000fd5b50505050611c9460975460ff1690565b15611cb15760405162461bcd60e51b81526004016106a990614c42565b610800831115611cf75760405162461bcd60e51b81526020600482015260116024820152706d6574616461746120746f6f206c6f6e6760781b60448201526064016106a9565b6000858152610160602052604090208054611d1457611d14614c6c565b6000816008018054611d2590614dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5190614dbc565b8015611d9e5780601f10611d7357610100808354040283529160200191611d9e565b820191906000526020600020905b815481529060010190602001808311611d8157829003601f168201915b50939450611db693505050600884019050878761432b565b50867fc31c69f7d2faef3482aac0691da695aa5839c98a11dbbe8797fd91d7f8a4f6e28284600801604051611dec929190615149565b60405180910390a250505050505050565b6000611e096001613a69565b90508015611e21576000805461ff0019166101001790555b611e29613af6565b611e31613af6565b611e39613af6565b611e41613af6565b611e49613b1d565b611e51613b4c565b611e59613af6565b61015f80546001600160a01b0319166001600160a01b03851617905583611eae5760405162461bcd60e51b81526020600482015260096024820152686e6f2061646d696e7360b81b60448201526064016106a9565b60005b84811015611f4d576000868683818110611ecd57611ecd614ed7565b9050602002016020810190611ee291906144b6565b6001600160a01b03161415611f265760405162461bcd60e51b815260206004820152600a6024820152693d32b9379030b236b4b760b11b60448201526064016106a9565b611f3d6000878784818110611b7057611b70614ed7565b611f468161512e565b9050611eb1565b508115611f8457611f6c6000805160206154238339815191523261372b565b611f8460008051602061542383398151915280613b7b565b8015611fca576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663299372686040518163ffffffff1660e01b815260040160206040518083038186803b15801561202057600080fd5b505afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120589190614cc7565b6001600160a01b0316336001600160a01b0316148061210e575061015f60009054906101000a90046001600160a01b03166001600160a01b031663e29581aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120c157600080fd5b505afa1580156120d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f99190614cc7565b6001600160a01b0316336001600160a01b0316145b806121b0575061015f60009054906101000a90046001600160a01b03166001600160a01b03166327a099d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561216357600080fd5b505afa158015612177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219b9190614cc7565b6001600160a01b0316336001600160a01b0316145b80612252575061015f60009054906101000a90046001600160a01b03166001600160a01b0316639c200b886040518163ffffffff1660e01b815260040160206040518083038186803b15801561220557600080fd5b505afa158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d9190614cc7565b6001600160a01b0316336001600160a01b0316145b6122895760405162461bcd60e51b81526020600482015260086024820152671b9bdd081a5b5c1b60c21b60448201526064016106a9565b60975460ff16156122ac5760405162461bcd60e51b81526004016106a990614c42565b60008381526101606020526040902080546122d95760405162461bcd60e51b81526004016106a990614bee565b828160040160008282546122ed9190614cb0565b92505081905550818160040160008282546123089190614c98565b909155505050505050565b61231e60003361269d565b61233a5760405162461bcd60e51b81526004016106a990614d99565b610b5e613bc6565b60008581526101606020526040902080548691906123725760405162461bcd60e51b81526004016106a990614bee565b60018101546001600160a01b0316331461239e5760405162461bcd60e51b81526004016106a990614c17565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663bb1f47406040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156123ef57600080fd5b505af1158015612403573d6000803e3d6000fd5b5050505061241360975460ff1690565b156124305760405162461bcd60e51b81526004016106a990614c42565b8461246a5760405162461bcd60e51b815260206004820152600a602482015269656d707479206e616d6560b01b60448201526064016106a9565b6101008511156124ac5760405162461bcd60e51b815260206004820152600d60248201526c6e616d6520746f6f206c6f6e6760981b60448201526064016106a9565b6101008311156124ef5760405162461bcd60e51b815260206004820152600e60248201526d656d61696c20746f6f206c6f6e6760901b60448201526064016106a9565b600087815261016060205260409020805461250c5761250c614c6c565b600081600201805461251d90614dbc565b80601f016020809104026020016040519081016040528092919081815260200182805461254990614dbc565b80156125965780601f1061256b57610100808354040283529160200191612596565b820191906000526020600020905b81548152906001019060200180831161257957829003601f168201915b5050505050905060008260030180546125ae90614dbc565b80601f01602080910402602001604051908101604052809291908181526020018280546125da90614dbc565b80156126275780601f106125fc57610100808354040283529160200191612627565b820191906000526020600020905b81548152906001019060200180831161260a57829003601f168201915b5093945061263f935050506002850190508a8a61432b565b5061264e60038401888861432b565b50897ffbe7b9226d0807aa630b0494cc4a185400061b1a4c1d0df3bc556f094498b16e83838c8c8c8c604051612689969594939291906151de565b60405180910390a250505050505050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060006126d76101616139b9565b905060006126fc848684116126ed576000613c1e565b6126f78785614cb0565b613c1e565b9050806001600160401b0381111561271657612716614649565b60405190808252806020026020018201604052801561274f57816020015b61273c61424c565b8152602001906001900390816127345790505b50925060005b81811015612a4757610160600061277861276f848a614c98565b61016190613c34565b815260208082019290925260409081016000208151610120810183528154815260018201546001600160a01b03169381019390935260028101805491928401916127c190614dbc565b80601f01602080910402602001604051908101604052809291908181526020018280546127ed90614dbc565b801561283a5780601f1061280f5761010080835404028352916020019161283a565b820191906000526020600020905b81548152906001019060200180831161281d57829003601f168201915b5050505050815260200160038201805461285390614dbc565b80601f016020809104026020016040519081016040528092919081815260200182805461287f90614dbc565b80156128cc5780601f106128a1576101008083540402835291602001916128cc565b820191906000526020600020905b8154815290600101906020018083116128af57829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820180546128f990614dbc565b80601f016020809104026020016040519081016040528092919081815260200182805461292590614dbc565b80156129725780601f1061294757610100808354040283529160200191612972565b820191906000526020600020905b81548152906001019060200180831161295557829003601f168201915b505050505081526020016007820154815260200160088201805461299590614dbc565b80601f01602080910402602001604051908101604052809291908181526020018280546129c190614dbc565b8015612a0e5780601f106129e357610100808354040283529160200191612a0e565b820191906000526020600020905b8154815290600101906020018083116129f157829003601f168201915b505050505081525050848281518110612a2957612a29614ed7565b60200260200101819052508080612a3f9061512e565b915050612755565b50505092915050565b612a5b60003361269d565b612a775760405162461bcd60e51b81526004016106a990614d99565b61015f80546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152610160602052604090208054829190612aca5760405162461bcd60e51b81526004016106a990614bee565b60018101546001600160a01b03163314612af65760405162461bcd60e51b81526004016106a990614c17565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663bb1f47406040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b4757600080fd5b505af1158015612b5b573d6000803e3d6000fd5b50505050612b6b60975460ff1690565b15612b885760405162461bcd60e51b81526004016106a990614c42565b6000838152610160602090815260408083208151610120810183528154815260018201546001600160a01b0316938101939093526002810180549192840191612bd090614dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054612bfc90614dbc565b8015612c495780601f10612c1e57610100808354040283529160200191612c49565b820191906000526020600020905b815481529060010190602001808311612c2c57829003601f168201915b50505050508152602001600382018054612c6290614dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054612c8e90614dbc565b8015612cdb5780601f10612cb057610100808354040283529160200191612cdb565b820191906000526020600020905b815481529060010190602001808311612cbe57829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682018054612d0890614dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054612d3490614dbc565b8015612d815780601f10612d5657610100808354040283529160200191612d81565b820191906000526020600020905b815481529060010190602001808311612d6457829003601f168201915b5050505050815260200160078201548152602001600882018054612da490614dbc565b80601f0160208091040260200160405190810160405280929190818152602001828054612dd090614dbc565b8015612e1d5780601f10612df257610100808354040283529160200191612e1d565b820191906000526020600020905b815481529060010190602001808311612e0057829003601f168201915b505050919092525050815191925050612e3857612e38614c6c565b61015f5460408051631384017160e31b815290516000926001600160a01b031691639c200b88916004808301926020929190829003018186803b158015612e7e57600080fd5b505afa158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb69190614cc7565b60405163728007a960e11b8152600481018790529091506001600160a01b0382169063e5000f529060240160206040518083038186803b158015612ef957600080fd5b505afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f319190614df7565b15612f7e5760405162461bcd60e51b815260206004820152601860248201527f70726f6a65637420686173207265736572766174696f6e73000000000000000060448201526064016106a9565b608082015115612fc55760405162461bcd60e51b815260206004820152601260248201527170726f6a6563742068617320657363726f7760701b60448201526064016106a9565b6000858152610160602052604081208181556001810180546001600160a01b031916905590612ff7600283018261439f565b61300560038301600061439f565b60048201600090556005820160009055600682016000613025919061439f565b600782016000905560088201600061303d919061439f565b5061304c905061016186613c40565b61305857613058614c6c565b81602001516001600160a01b0316857f0dfede72020edf94c02fe864fbd28e7615a81fb1ddde6c3224c7236b5b520a67846040015185606001518660c001518760e001518861010001516040516130b3959493929190614e10565b60405180910390a35050505050565b6000828152606560205260409020600101546130dd81613721565b6109ba83836137b1565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663299372686040518163ffffffff1660e01b815260040160206040518083038186803b15801561313657600080fd5b505afa15801561314a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316e9190614cc7565b6001600160a01b0316336001600160a01b03161480613224575061015f60009054906101000a90046001600160a01b03166001600160a01b031663e29581aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156131d757600080fd5b505afa1580156131eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320f9190614cc7565b6001600160a01b0316336001600160a01b0316145b806132c6575061015f60009054906101000a90046001600160a01b03166001600160a01b03166327a099d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561327957600080fd5b505afa15801561328d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b19190614cc7565b6001600160a01b0316336001600160a01b0316145b80613368575061015f60009054906101000a90046001600160a01b03166001600160a01b0316639c200b886040518163ffffffff1660e01b815260040160206040518083038186803b15801561331b57600080fd5b505afa15801561332f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133539190614cc7565b6001600160a01b0316336001600160a01b0316145b61339f5760405162461bcd60e51b81526020600482015260086024820152671b9bdd081a5b5c1b60c21b60448201526064016106a9565b60975460ff16156133c25760405162461bcd60e51b81526004016106a990614c42565b60008381526101606020526040902080546133ef5760405162461bcd60e51b81526004016106a990614bee565b828160050160008282546134039190614cb0565b92505081905550818160050160008282546123089190614c98565b600082815261016060205260409020805483919061344e5760405162461bcd60e51b81526004016106a990614bee565b61345960003361269d565b80613470575060018101546001600160a01b031633145b6134bc5760405162461bcd60e51b815260206004820152601a60248201527f6e6f742061646d696e206f722070726f6a656374206f776e657200000000000060448201526064016106a9565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663bb1f47406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561350d57600080fd5b505af1158015613521573d6000803e3d6000fd5b5050505061353160975460ff1690565b1561354e5760405162461bcd60e51b81526004016106a990614c42565b6001600160a01b0383166135915760405162461bcd60e51b815260206004820152600a6024820152693d32b9379037bbb732b960b11b60448201526064016106a9565b60008481526101606020526040902080546135ae576135ae614c6c565b6001810180546001600160a01b038681166001600160a01b03198316811790935560405191169190829088907f1e33df2f19cae9abe592944dff51706da0aa04f97851c3113235a7056a338e9290600090a4505050505050565b61361360003361269d565b61362f5760405162461bcd60e51b81526004016106a990614d99565b816136675760405162461bcd60e51b81526020600482015260086024820152671e995c9bc81b5d5b60c21b60448201526064016106a9565b60006136746101616139b9565b905060006136948587841161368a576000613c1e565b6126f78885614cb0565b905060005b81811015613718576000610160816136b461276f858c614c98565b81526020019081526020016000209050848682600401546136d5919061523a565b6136df9190615259565b6004820155600581015485906136f690889061523a565b6137009190615259565b600590910155806137108161512e565b915050613699565b50505050505050565b610b1a8133613c4c565b613735828261269d565b610a395760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561376d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6137bb828261269d565b15610a395760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61382360003361269d565b610b1a5760405162461bcd60e51b81526004016106a990614d99565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613872576109ba83613cb0565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156138ab57600080fd5b505afa9250505080156138db575060408051601f3d908101601f191682019092526138d891810190614df7565b60015b61393e5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106a9565b6000805160206153dc83398151915281146139ad5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106a9565b506109ba838383613d4c565b6000610654825490565b60975460ff16613a0c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106a9565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000613a628383613d77565b9392505050565b60008054610100900460ff1615613ab0578160ff166001148015613a8c5750303b155b613aa85760405162461bcd60e51b81526004016106a99061527b565b506000919050565b60005460ff808416911610613ad75760405162461bcd60e51b81526004016106a99061527b565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610b5e5760405162461bcd60e51b81526004016106a9906152c9565b600054610100900460ff16613b445760405162461bcd60e51b81526004016106a9906152c9565b610b5e613dc6565b600054610100900460ff16613b735760405162461bcd60e51b81526004016106a9906152c9565b610b5e613df9565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60975460ff1615613be95760405162461bcd60e51b81526004016106a990614c42565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613a393390565b6000818310613c2d5781613a62565b5090919050565b6000613a628383613e27565b6000613a628383613e51565b613c56828261269d565b610a3957613c6e816001600160a01b03166014613f44565b613c79836020613f44565b604051602001613c8a929190615314565b60408051601f198184030181529082905262461bcd60e51b82526106a991600401615389565b6001600160a01b0381163b613d1d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106a9565b6000805160206153dc83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613d55836140df565b600082511180613d625750805b156109ba57613d71838361411f565b50505050565b6000818152600183016020526040812054613dbe57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610654565b506000610654565b600054610100900460ff16613ded5760405162461bcd60e51b81526004016106a9906152c9565b6097805460ff19169055565b600054610100900460ff16613e205760405162461bcd60e51b81526004016106a9906152c9565b600160c955565b6000826000018281548110613e3e57613e3e614ed7565b9060005260206000200154905092915050565b60008181526001830160205260408120548015613f3a576000613e75600183614cb0565b8554909150600090613e8990600190614cb0565b9050818114613eee576000866000018281548110613ea957613ea9614ed7565b9060005260206000200154905080876000018481548110613ecc57613ecc614ed7565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613eff57613eff61539c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610654565b6000915050610654565b60606000613f5383600261523a565b613f5e906002614c98565b6001600160401b03811115613f7557613f75614649565b6040519080825280601f01601f191660200182016040528015613f9f576020820181803683370190505b509050600360fc1b81600081518110613fba57613fba614ed7565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613fe957613fe9614ed7565b60200101906001600160f81b031916908160001a905350600061400d84600261523a565b614018906001614c98565b90505b6001811115614090576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061404c5761404c614ed7565b1a60f81b82828151811061406257614062614ed7565b60200101906001600160f81b031916908160001a90535060049490941c93614089816153b2565b905061401b565b508315613a625760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106a9565b6140e881613cb0565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6141875760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106a9565b600080846001600160a01b0316846040516141a291906153c9565b600060405180830381855af49150503d80600081146141dd576040519150601f19603f3d011682016040523d82523d6000602084013e6141e2565b606091505b509150915061420a82826040518060600160405280602781526020016153fc60279139614213565b95945050505050565b60608315614222575081613a62565b8251156142325782518084602001fd5b8160405162461bcd60e51b81526004016106a99190615389565b6040518061012001604052806000801916815260200160006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016060815260200160008019168152602001606081525090565b8280546142b390614dbc565b90600052602060002090601f0160209004810192826142d5576000855561431b565b82601f106142ee57805160ff191683800117855561431b565b8280016001018555821561431b579182015b8281111561431b578251825591602001919060010190614300565b506143279291506143d5565b5090565b82805461433790614dbc565b90600052602060002090601f016020900481019282614359576000855561431b565b82601f106143725782800160ff1982351617855561431b565b8280016001018555821561431b579182015b8281111561431b578235825591602001919060010190614384565b5080546143ab90614dbc565b6000825580601f106143bb575050565b601f016020900490600052602060002090810190610b1a91905b5b8082111561432757600081556001016143d6565b6000602082840312156143fc57600080fd5b81356001600160e01b031981168114613a6257600080fd5b6001600160a01b0381168114610b1a57600080fd5b8035613af181614414565b60008060006060848603121561444957600080fd5b8335925060208401359150604084013561446281614414565b809150509250925092565b60006020828403121561447f57600080fd5b5035919050565b6000806040838503121561449957600080fd5b8235915060208301356144ab81614414565b809150509250929050565b6000602082840312156144c857600080fd5b8135613a6281614414565b60008060008060008060c087890312156144ec57600080fd5b863595506020870135945060408701359350606087013560ff8116811461451257600080fd5b9598949750929560808101359460a0909101359350915050565b60005b8381101561454757818101518382015260200161452f565b83811115613d715750506000910152565b6000815180845261457081602086016020860161452c565b601f01601f19169290920160200192915050565b60006101208251845260208301516145a760208601826001600160a01b03169052565b5060408301518160408601526145bf82860182614558565b915050606083015184820360608601526145d98282614558565b9150506080830151608085015260a083015160a085015260c083015184820360c08601526146078282614558565b91505060e083015160e0850152610100808401518583038287015261462c8382614558565b9695505050505050565b602081526000613a626020830184614584565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b038111828210171561468157614681614649565b60405290565b60006001600160401b03808411156146a1576146a1614649565b604051601f8501601f19908116603f011681019082821181831017156146c9576146c9614649565b816040528093508581528686860111156146e257600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261470d57600080fd5b613a6283833560208501614687565b60006020828403121561472e57600080fd5b81356001600160401b038082111561474557600080fd5b9083019060c0828603121561475957600080fd5b61476161465f565b61476a83614429565b815260208301358281111561477e57600080fd5b61478a878286016146fc565b6020830152506040830135828111156147a257600080fd5b6147ae878286016146fc565b6040830152506060830135828111156147c657600080fd5b6147d2878286016146fc565b6060830152506080830135608082015260a0830135828111156147f457600080fd5b614800878286016146fc565b60a08301525095945050505050565b6000806040838503121561482257600080fd5b823561482d81614414565b915060208301356001600160401b0381111561484857600080fd5b8301601f8101851361485957600080fd5b61486885823560208401614687565b9150509250929050565b60008083601f84011261488457600080fd5b5081356001600160401b0381111561489b57600080fd5b6020830191508360208285010111156148b357600080fd5b9250929050565b600080600080606085870312156148d057600080fd5b8435935060208501356001600160401b038111156148ed57600080fd5b6148f987828801614872565b9598909750949560400135949350505050565b60008083601f84011261491e57600080fd5b5081356001600160401b0381111561493557600080fd5b6020830191508360208260051b85010111156148b357600080fd5b8015158114610b1a57600080fd5b60008060008060006060868803121561497657600080fd5b85356001600160401b038082111561498d57600080fd5b61499989838a0161490c565b909750955060208801359150808211156149b257600080fd5b506149bf8882890161490c565b90945092505060408601356149d381614950565b809150509295509295909350565b6000806000604084860312156149f657600080fd5b8335925060208401356001600160401b03811115614a1357600080fd5b614a1f86828701614872565b9497909650939450505050565b60008060008060608587031215614a4257600080fd5b84356001600160401b03811115614a5857600080fd5b614a648782880161490c565b9095509350506020850135614a7881614414565b91506040850135614a8881614950565b939692955090935050565b600080600060608486031215614aa857600080fd5b505081359360208301359350604090920135919050565b600080600080600060608688031215614ad757600080fd5b8535945060208601356001600160401b0380821115614af557600080fd5b614b0189838a01614872565b90965094506040880135915080821115614b1a57600080fd5b50614b2788828901614872565b969995985093965092949392505050565b60008060408385031215614b4b57600080fd5b50508035926020909101359150565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614baf57603f19888603018452614b9d858351614584565b94509285019290850190600101614b81565b5092979650505050505050565b60008060008060808587031215614bd257600080fd5b5050823594602084013594506040840135936060013592509050565b6020808252600f908201526e1d5b9adb9bdddb881c1c9bda9958dd608a1b604082015260600190565b6020808252601190820152703737ba10383937b532b1ba1037bbb732b960791b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614cab57614cab614c82565b500190565b600082821015614cc257614cc2614c82565b500390565b600060208284031215614cd957600080fd5b8151613a6281614414565b600060208284031215614cf657600080fd5b8151613a6281614950565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600990820152683737ba1030b236b4b760b91b604082015260600190565b600181811c90821680614dd057607f821691505b60208210811415614df157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215614e0957600080fd5b5051919050565b60a081526000614e2360a0830188614558565b8281036020840152614e358188614558565b90508281036040840152614e498187614558565b90508460608401528281036080840152614e638185614558565b98975050505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b608081526000614eab6080830188614558565b8660208401528281036040840152614ec4818688614e6f565b9150508260608301529695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000823561011e19833603018112614f0457600080fd5b9190910192915050565b6000813561065481614414565b6000808335601e19843603018112614f3257600080fd5b8301803591506001600160401b03821115614f4c57600080fd5b6020019150368190038213156148b357600080fd5b601f8211156109ba57600081815260208120601f850160051c81016020861015614f885750805b601f850160051c820191505b81811015611bbb57828155600101614f94565b6001600160401b03831115614fbe57614fbe614649565b614fd283614fcc8354614dbc565b83614f61565b6000601f8411600181146150065760008515614fee5750838201355b600019600387901b1c1916600186901b178355611fca565b600083815260209020601f19861690835b828110156150375786850135825560209485019460019092019101615017565b50868210156150545760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8135815561509d61507960208401614f0e565b6001830180546001600160a01b0319166001600160a01b0392909216919091179055565b6150aa6040830183614f1b565b6150b8818360028601614fa7565b50506150c76060830183614f1b565b6150d5818360038601614fa7565b50506080820135600482015560a082013560058201556150f860c0830183614f1b565b615106818360068601614fa7565b505060e08201356007820155615120610100830183614f1b565b613d71818360088601614fa7565b600060001982141561514257615142614c82565b5060010190565b60408152600061515c6040830185614558565b6020838203818501526000855461517281614dbc565b8085526001828116801561518d57600181146151a1576151cf565b60ff198416878701526040870194506151cf565b896000528560002060005b848110156151c75781548982018901529083019087016151ac565b880187019550505b50929998505050505050505050565b6080815260006151f16080830189614558565b82810360208401526152038189614558565b90508281036040840152615218818789614e6f565b9050828103606084015261522d818587614e6f565b9998505050505050505050565b600081600019048311821515161561525457615254614c82565b500290565b60008261527657634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161534c81601785016020880161452c565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161537d81602884016020880161452c565b01602801949350505050565b602081526000613a626020830184614558565b634e487b7160e01b600052603160045260246000fd5b6000816153c1576153c1614c82565b506000190190565b60008251614f0481846020870161452c56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649dd0c3bd9bb5e1c820c362d05d5cb38480246edb10ff416751bc3dcaccab86fea91575122619884f8f346f6f08d276f996bc367457e1cf69df01d9361cf4e0f1a264697066735822122008fded29346ba7c42572ee55e8dc12c3788e12a8582f8938e54dc14494f7570c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createProject((address,string,string,string,bytes32,string))": {
        "details": "Does not check name or email for validity or uniqueness"
      },
      "depositProjectEscrow(bytes32,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Needs either a token allowance from msg.sender, or a gasless approval (v/r/s != 0).CAUTION: To avoid loss of funds, do NOT deposit to this contract by token.transfer()."
      },
      "getProject(bytes32)": {
        "details": "Reverts if the id is unknown"
      },
      "getProjects(uint256,uint256)": {
        "details": "Truncates the results if skip or size are out of bounds"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address[],address,bool)": {
        "details": "Called once to set up the contract. Not called during proxy upgrades.",
        "params": {
          "grantImporterRole": "allows the contract deployer to import initial data into the contract using unsafeImport* functions, which is used for proxy-less upgrades. CAUTION: Once import is finished, the importer role should be explicitly revoked."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setProjectProps(bytes32,string,string)": {
        "details": "Does not check name or email for validity or uniqueness"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unsafeImportData((bytes32,address,string,string,uint256,uint256,string,bytes32,string)[],address[],bool)": {
        "details": "Allows to import initial contract data. Used for proxy-less upgrades.",
        "params": {
          "creators": "Adding the zero address will allow anyone to create projects.",
          "revokeImporterRole": "stops further data import by revoking the role. CAUTION: Once import is finished, the role should be explicitly revoked."
        }
      },
      "unsafeSetEscrows(uint256,uint256,uint256,uint256)": {
        "details": "Adjusts multiple projects escrows relative to their current values.CAUTION: This can break data consistency. Used for proxy-less upgrades."
      },
      "unsafeSetRegistry(address)": {
        "details": "CAUTION: This can break data consistency. Used for proxy-less upgrades."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Entry point for managing projects that host content on the network",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createProject((address,string,string,string,bytes32,string))": {
        "notice": "Registers a new project. Requires project creator role."
      },
      "deleteProject(bytes32)": {
        "notice": "Unregisters a project. Reverts if project has escrow or reservations."
      },
      "depositProjectEscrow(bytes32,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Transfers USDC into the contract and applies them toward given operator stake."
      },
      "setProjectContent(bytes32,string,bytes32)": {
        "notice": "Publishes new content on the network"
      },
      "setProjectMetadata(bytes32,string)": {
        "notice": "Sets project metadata"
      },
      "withdrawProjectEscrow(bytes32,uint256,address)": {
        "notice": "Transfers escrow from contract to given recipient. Reverts if escrow is reserved."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1533,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1840,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1100,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 1189,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1204,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1248,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1078,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14836,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "_registry",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(ArmadaRegistry)17384"
      },
      {
        "astId": 14841,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "_projects",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_bytes32,t_struct(ArmadaProject)18921_storage)"
      },
      {
        "astId": 14844,
        "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
        "label": "_projectIds",
        "offset": 0,
        "slot": "353",
        "type": "t_struct(Bytes32Set)9898_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ArmadaRegistry)17384": {
        "encoding": "inplace",
        "label": "contract ArmadaRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(ArmadaProject)18921_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ArmadaProject)",
        "numberOfBytes": "32",
        "value": "t_struct(ArmadaProject)18921_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ArmadaProject)18921_storage": {
        "encoding": "inplace",
        "label": "struct ArmadaProject",
        "members": [
          {
            "astId": 18904,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 18906,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18908,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 18910,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "email",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 18912,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "escrow",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18914,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "reserve",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 18916,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "content",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 18918,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "checksum",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 18920,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "metadata",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Bytes32Set)9898_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 9897,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9704_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)9704_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9699,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9703,
            "contract": "contracts/ArmadaProjects.sol:ArmadaProjects",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}